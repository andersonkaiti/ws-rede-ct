generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           String   @id @default(uuid())
  name         String
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  emailAddress String   @unique @map("email_address")
  orcid        String?  @map("orcid")
  phone        String?
  lattesUrl    String?  @map("lattes_url")
  role         UserRole @default(USER)

  news          News[]
  teamMember    TeamMember[]
  certification Certification[]
  pendencies    Pendency[]
  Researcher    Researcher[]

  @@map("users")
}

model News {
  id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")

  @@map("news")
}

model Team {
  id          String       @id @default(uuid())
  name        String
  type        String
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id          String   @id @default(uuid())
  role        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  teamId      String   @map("team_id")
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model Certification {
  id               String @id @default(uuid())
  title            String
  description      String
  certificationUrl String @map("certification_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("certifications")
}

enum PendencyStatus {
  PENDING
  PAID
}

model Pendency {
  id          String         @id @default(uuid())
  title       String
  description String?
  status      PendencyStatus @default(PENDING)
  dueDate     DateTime?      @map("due_date")
  documentUrl String         @map("document_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("pendencies")
}

enum Seniority {
  SENIOR
  RESEARCHER
  JUNIOR
  HONOR
}

enum Degree {
  DOCTOR
  MASTER
  BACHELOR
  TECHNICAL
  POSTGRADUATE
}

model Researcher {
  id                 String    @id @default(uuid())
  registrationNumber String    @map("registration_number")
  mainEtps           String?   @map("main_etps")
  formations         String?   @map("formations")
  degrees            Degree[]  @map("degrees")
  occupations        String    @map("occupations")
  seniority          Seniority @map("seniority")
  institutions       String    @map("institutions")
  biography          String?   @map("biography")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  // ETP relationships
  etpLeader    ETPLeader[]
  etpDeputy    ETPDeputy[]
  etpSecretary ETPSecretary[]
  etpMembers   ETP[]          @relation("etp_members")

  @@map("researchers")
}

enum InMemoriamRole {
  RESEARCHER
  LEADER
}

model InMemoriam {
  id        String         @id @default(uuid())
  name      String
  birthDate DateTime       @map("birth_date")
  deathDate DateTime       @map("death_date")
  biography String?
  photoUrl  String?        @map("photo_url")
  role      InMemoriamRole

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("in_memoriam")
}

model ETPLeader {
  id           String     @id @default(uuid())
  etpId        String     @map("etp_id")
  etp          ETP        @relation(fields: [etpId], references: [id], onDelete: Cascade)
  researcherId String     @map("researcher_id")
  researcher   Researcher @relation(fields: [researcherId], references: [id], onDelete: Cascade)

  @@unique([etpId])
  @@map("etp_leader")
}

model ETPDeputy {
  id           String     @id @default(uuid())
  etpId        String     @map("etp_id")
  etp          ETP        @relation(fields: [etpId], references: [id], onDelete: Cascade)
  researcherId String     @map("researcher_id")
  researcher   Researcher @relation(fields: [researcherId], references: [id], onDelete: Cascade)

  @@unique([etpId])
  @@map("etp_deputy")
}

model ETPSecretary {
  id           String     @id @default(uuid())
  etpId        String     @map("etp_id")
  etp          ETP        @relation(fields: [etpId], references: [id], onDelete: Cascade)
  researcherId String     @map("researcher_id")
  researcher   Researcher @relation(fields: [researcherId], references: [id], onDelete: Cascade)

  @@unique([etpId])
  @@map("etp_secretary")
}

model ETP {
  id          String  @id @default(uuid())
  code        String  @unique
  title       String
  description String?
  notes       String?

  leader       ETPLeader?
  deputyLeader ETPDeputy?
  secretary    ETPSecretary?
  members      Researcher[]  @relation("etp_members")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([code])
  @@map("etps")
}
