{"version":3,"sources":["../bin/server.ts","../src/app.ts","../src/routes/index-routes.ts","../src/routes/auth-routes.ts","../src/middlewares/clerk.ts","../src/controllers/clerk-auth-controller.ts","../src/factories/controllers/clerk.factory.ts","../src/routes/user-routes.ts","../src/controllers/user/create-user-controller.ts","../src/controllers/user/delete-user-controller.ts","../src/controllers/user/update-user.controller.ts","../src/repositories/user/user-repository.ts","../config/database.ts","../src/factories/repositories/user.factory.ts","../src/factories/services/clerk-webhook-service.factory.ts","../src/services/clerk-webhook/clerk-webhook.service.ts","../src/factories/controllers/user.factory.ts","../src/routes/news-routes.ts","../src/controllers/news/create-news-controller.ts","../src/controllers/news/update-news-controller.ts","../src/controllers/news/delete-news-controller.ts","../src/repositories/news/news-repository.ts","../src/factories/repositories/news.factory.ts","../src/controllers/news/find-all-news-controller.ts","../src/controllers/news/find-news-by-id-controller.ts","../src/controllers/news/find-news-by-author-id-controller.ts","../src/factories/controllers/news.factory.ts"],"sourcesContent":["import http, { type Server } from \"node:http\";\r\nimport { app } from \"../src/app.ts\";\r\n\r\nconst server: Server = http.createServer(app);\r\n\r\nconst PORT = 4_000;\r\n\r\nserver.listen(PORT, () => {\r\n  console.log(`🚀 Aplicação rodando na porta ${PORT}.`);\r\n});\r\n","import express, { type Application } from \"express\";\r\nimport cors, { type CorsOptions } from \"cors\";\r\nimport { indexRoutes } from \"./routes/index-routes.ts\";\r\nimport { authRoutes } from \"./routes/auth-routes.ts\";\r\nimport { userRoutes } from \"./routes/user-routes.ts\";\r\nimport { newsRoutes } from \"./routes/news-routes.ts\";\r\n\r\nconst app: Application = express();\r\n\r\nconst corsOptions: CorsOptions = {\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  origin: [\"http://localhost:3000\", \"https://rede-ct.vercel.app\"],\r\n  credentials: true,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.use(\"/\", indexRoutes);\r\napp.use(\"/auth\", authRoutes);\r\napp.use(\"/user\", userRoutes);\r\napp.use(\"/news\", newsRoutes);\r\n\r\nexport { app };\r\n","import { Router, type Request, type Response } from \"express\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", (_req: Request, res: Response) => {\r\n  res.status(200).json({\r\n    message: \"Rede CT\",\r\n  });\r\n});\r\n\r\nexport { router as indexRoutes };\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport { clerkMiddleware } from \"../middlewares/clerk.ts\";\r\nimport { makeClerkAuthController } from \"../factories/controllers/clerk.factory.ts\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", clerkMiddleware, async (req: Request, res: Response) => {\r\n  const { clerkAuthController } = makeClerkAuthController();\r\n\r\n  await clerkAuthController.handle(req, res);\r\n});\r\n\r\nexport { router as authRoutes };\r\n","import { ClerkExpressWithAuth } from \"@clerk/clerk-sdk-node\";\r\nimport { type Request, type Response, type NextFunction } from \"express\";\r\n\r\nconst clerkAuth = ClerkExpressWithAuth();\r\n\r\nexport const clerkMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  return clerkAuth(req as any, res as any, next);\r\n};\r\n","import { type Request, type Response } from \"express\";\r\n\r\ninterface ClerkAuth {\r\n  userId: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport class ClerkAuthController {\r\n  async handle(req: Request, res: Response) {\r\n    const auth = (req as { auth?: ClerkAuth }).auth;\r\n\r\n    if (!auth || !auth.userId) {\r\n      res.status(401).json({ message: \"Não autenticado\" });\r\n      return;\r\n    }\r\n\r\n    // Se autenticado, envia resposta com status 200\r\n    res.status(200).json({\r\n      message: \"Usuário autenticado com Clerk\",\r\n      userId: auth.userId,\r\n    });\r\n  }\r\n}\r\n","import { ClerkAuthController } from \"../../controllers/clerk-auth-controller.ts\";\r\n\r\nexport function makeClerkAuthController() {\r\n  const clerkAuthController = new ClerkAuthController();\r\n\r\n  return { clerkAuthController };\r\n}\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport {\r\n  makeCreateUserController,\r\n  makeUpdateUserController,\r\n  makeDeleteUserController,\r\n} from \"../factories/controllers/user.factory.ts\";\r\n\r\nconst router = Router();\r\n\r\nrouter.post(\r\n  \"/api/webhook/created-user\",\r\n  async (req: Request, res: Response) => {\r\n    const { createUserController } = makeCreateUserController();\r\n\r\n    await createUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.post(\r\n  \"/api/webhook/updated-user\",\r\n  async (req: Request, res: Response) => {\r\n    const { updateUserController } = makeUpdateUserController();\r\n\r\n    await updateUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.post(\r\n  \"/api/webhook/deleted-user\",\r\n  async (req: Request, res: Response) => {\r\n    const { deleteUserController } = makeDeleteUserController();\r\n\r\n    await deleteUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nexport { router as userRoutes };\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserCreatedEvent } from \"../../models/user-created-event.d.ts\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.d.ts\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.d.ts\";\r\n\r\nexport class CreateUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserCreatedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const {\r\n        type: eventType,\r\n        data: {\r\n          created_at,\r\n          birthday,\r\n          last_sign_in_at,\r\n          updated_at,\r\n          email_addresses,\r\n          ...rest\r\n        },\r\n      } = event;\r\n\r\n      if (eventType === \"user.created\") {\r\n        await this.userRepository.create({\r\n          created_at: new Date(created_at),\r\n          updated_at: new Date(updated_at),\r\n          email_addresses: email_addresses,\r\n          ...rest,\r\n        });\r\n\r\n        res.status(201).json({\r\n          message: \"Usuário criado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserDeletedEvent } from \"../../models/user-deleted-event.d.ts\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.d.ts\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.d.ts\";\r\n\r\nexport class DeleteUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserDeletedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const { type: eventType, data: user } = event;\r\n\r\n      if (eventType === \"user.deleted\") {\r\n        await this.userRepository.delete(user);\r\n\r\n        res.status(200).json({\r\n          message: \"Usuário deletado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserUpdatedEvent } from \"../../models/user-updated-event.d.ts\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.d.ts\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.d.ts\";\r\n\r\nexport class UpdateUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserUpdatedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const {\r\n        type: eventType,\r\n        data: { email_addresses, ...user },\r\n      } = event;\r\n\r\n      if (eventType === \"user.updated\") {\r\n        await this.userRepository.update({\r\n          ...user,\r\n          email_addresses: email_addresses,\r\n        });\r\n\r\n        res.status(200).json({\r\n          message: \"Usuário atualizado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { PrismaClient } from \"@prisma/client\";\r\nimport type { IUserRepository } from \"./iuser-repository.d.ts\";\r\nimport type { IUserCreatedEvent } from \"../../models/user-created-event.d.ts\";\r\nimport type { IUserUpdatedEvent } from \"../../models/user-updated-event.d.ts\";\r\nimport type { IUserDeletedEvent } from \"../../models/user-deleted-event.d.ts\";\r\n\r\nexport class UserRepository implements IUserRepository {\r\n  constructor(private readonly prisma: PrismaClient) {}\r\n\r\n  async create({\r\n    email_addresses,\r\n    first_name,\r\n    last_name,\r\n    ...user\r\n  }: IUserCreatedEvent[\"data\"]) {\r\n    await this.prisma.user.create({\r\n      data: {\r\n        first_name: first_name,\r\n        last_name: last_name,\r\n        id: user.id,\r\n        created_at: user.created_at,\r\n        updated_at: user.updated_at,\r\n        image_url: user.image_url,\r\n        profile_image_url: user.profile_image_url,\r\n\r\n        email_addresses: {\r\n          create: email_addresses.map((email) => ({\r\n            email_address: email.email_address,\r\n            linked_to: JSON.stringify(email.linked_to),\r\n            id: email.id,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(user: IUserUpdatedEvent[\"data\"]) {\r\n    await this.prisma.user.update({\r\n      where: { id: user.id },\r\n      data: {\r\n        first_name: user.first_name,\r\n        last_name: user.last_name,\r\n        image_url: user.image_url,\r\n        profile_image_url: user.profile_image_url,\r\n\r\n        email_addresses: {\r\n          update: user.email_addresses.map((email) => ({\r\n            where: { id: email.id },\r\n            data: {\r\n              email_address: email.email_address,\r\n              linked_to: JSON.stringify(email.linked_to),\r\n            },\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(user: IUserDeletedEvent[\"data\"]) {\r\n    await this.prisma.user.delete({\r\n      where: { id: user.id },\r\n    });\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport { prisma };\r\n","import { UserRepository } from \"../../repositories/user/user-repository.ts\";\r\nimport { prisma } from \"../../../config/database.ts\";\r\n\r\nexport function makeUserRepository() {\r\n  return new UserRepository(prisma);\r\n}\r\n","import { Webhook } from \"svix\";\r\nimport { ClerkWebhookService } from \"../../services/clerk-webhook/clerk-webhook.service.ts\";\r\n\r\nexport function makeClerkWebhookService(secret: string) {\r\n  return new ClerkWebhookService(new Webhook(secret));\r\n}\r\n","import { type Request } from \"express\";\r\nimport { Webhook } from \"svix\";\r\nimport type { IClerkWebhookService } from \"./iclerk-webhook.js\";\r\n\r\nexport class ClerkWebhookService implements IClerkWebhookService {\r\n  constructor(private readonly webhook: Webhook) {}\r\n\r\n  async verifyEvent<T>(req: Request): Promise<T | undefined> {\r\n    const {\r\n      \"svix-id\": svixId,\r\n      \"svix-timestamp\": svixTimestamp,\r\n      \"svix-signature\": svixSignature,\r\n    } = req.headers;\r\n\r\n    if (!svixId || !svixTimestamp || !svixSignature) {\r\n      throw new Error(\"Headers are missing\");\r\n    }\r\n\r\n    const payload = JSON.stringify(req.body);\r\n\r\n    const headers = {\r\n      \"svix-id\": svixId as string,\r\n      \"svix-timestamp\": svixTimestamp as string,\r\n      \"svix-signature\": svixSignature as string,\r\n    };\r\n\r\n    try {\r\n      return this.webhook.verify(payload, headers) as T;\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        throw new Error(err.message);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CreateUserController } from \"../../controllers/user/create-user-controller.ts\";\r\nimport { DeleteUserController } from \"../../controllers/user/delete-user-controller.ts\";\r\nimport { UpdateUserController } from \"../../controllers/user/update-user.controller.ts\";\r\nimport { makeUserRepository } from \"../repositories/user.factory.ts\";\r\nimport { makeClerkWebhookService } from \"../services/clerk-webhook-service.factory.ts\";\r\nimport { config } from \"dotenv\";\r\nconfig();\r\n\r\nexport function makeCreateUserController() {\r\n  return {\r\n    createUserController: new CreateUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_CREATED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeUpdateUserController() {\r\n  return {\r\n    updateUserController: new UpdateUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_UPDATED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeDeleteUserController() {\r\n  return {\r\n    deleteUserController: new DeleteUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_DELETED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport {\r\n  makeCreateNewsController,\r\n  makeDeleteNewsController,\r\n  makeFindAllNewsController,\r\n  makeFindNewsByAuthorIdController,\r\n  makeFindNewsByIdController,\r\n  makeUpdateNewsController,\r\n} from \"../factories/controllers/news.factory.ts\";\r\n\r\nconst routes = Router();\r\n\r\nroutes.post(\"/\", async (req: Request, res: Response) => {\r\n  const { createNewsController } = makeCreateNewsController();\r\n\r\n  await createNewsController.handle(req, res);\r\n});\r\n\r\nroutes.get(\"/\", async (req: Request, res: Response) => {\r\n  const { findAllNewsController } = makeFindAllNewsController();\r\n\r\n  await findAllNewsController.handle(req, res);\r\n});\r\n\r\nroutes.get(\"/:id\", async (req: Request, res: Response) => {\r\n  const { findNewsByIdController } = makeFindNewsByIdController();\r\n\r\n  await findNewsByIdController.handle(req, res);\r\n});\r\n\r\nroutes.get(\"/author/:author_id\", async (req: Request, res: Response) => {\r\n  const { findNewsByAuthorIdController } = makeFindNewsByAuthorIdController();\r\n\r\n  await findNewsByAuthorIdController.handle(req, res);\r\n});\r\n\r\nroutes.put(\"/:id\", async (req: Request, res: Response) => {\r\n  const { updateNewsController } = makeUpdateNewsController();\r\n\r\n  await updateNewsController.handle(req, res);\r\n});\r\n\r\nroutes.delete(\"/:id\", async (req: Request, res: Response) => {\r\n  const { deleteNewsController } = makeDeleteNewsController();\r\n\r\n  await deleteNewsController.handle(req, res);\r\n});\r\n\r\nexport { routes as newsRoutes };\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class CreateNewsController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { title, content, author_id } = req.body;\r\n\r\n      const news = await this.newsRepository.create({\r\n        title,\r\n        content,\r\n        author_id,\r\n      });\r\n\r\n      res.status(201).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class UpdateNewsController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      const { title, content } = req.body;\r\n\r\n      const news = await this.newsRepository.update({\r\n        id,\r\n        title,\r\n        content,\r\n      });\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class DeleteNewsController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      await this.newsRepository.delete(id);\r\n\r\n      res.status(200).json({\r\n        message: \"Notícia deletada com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { News, PrismaClient } from \"@prisma/client\";\r\nimport type { INewsRepository } from \"./inews-repository.d.ts\";\r\nimport type { INewsDTO, IUpdateNewsDTO } from \"../../dto/news.js\";\r\n\r\nexport class NewsRepository implements INewsRepository {\r\n  constructor(private readonly prisma: PrismaClient) {}\r\n\r\n  async create({ title, content, author_id }: INewsDTO): Promise<News> {\r\n    return await this.prisma.news.create({\r\n      data: {\r\n        title,\r\n        content,\r\n        author_id,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findAll(): Promise<News[]> {\r\n    return await this.prisma.news.findMany();\r\n  }\r\n\r\n  async findById(id: string): Promise<News | null> {\r\n    return await this.prisma.news.findUnique({\r\n      where: {\r\n        id,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findByAuthorId(author_id: string): Promise<News[]> {\r\n    return await this.prisma.news.findMany({\r\n      where: {\r\n        author_id,\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(news: IUpdateNewsDTO): Promise<News> {\r\n    return await this.prisma.news.update({\r\n      where: {\r\n        id: news.id,\r\n      },\r\n      data: {\r\n        title: news.title,\r\n        content: news.content,\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(id: string): Promise<void> {\r\n    await this.prisma.news.delete({\r\n      where: {\r\n        id,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { NewsRepository } from \"../../repositories/news/news-repository.ts\";\r\nimport { prisma } from \"../../../config/database.ts\";\r\n\r\nexport function makeNewsRepository() {\r\n  return new NewsRepository(prisma);\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class FindAllNewsController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(_req: Request, res: Response) {\r\n    try {\r\n      const news = await this.newsRepository.findAll();\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class FindNewsByIdController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      const news = await this.newsRepository.findById(id);\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.js\";\r\n\r\nexport class FindByAuthorController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { author_id } = req.params;\r\n\r\n      const news = await this.newsRepository.findByAuthorId(author_id);\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CreateNewsController } from \"../../controllers/news/create-news-controller.ts\";\r\nimport { UpdateNewsController } from \"../../controllers/news/update-news-controller.ts\";\r\nimport { DeleteNewsController } from \"../../controllers/news/delete-news-controller.ts\";\r\nimport { makeNewsRepository } from \"../repositories/news.factory.ts\";\r\nimport { FindAllNewsController } from \"../../controllers/news/find-all-news-controller.ts\";\r\nimport { FindNewsByIdController } from \"../../controllers/news/find-news-by-id-controller.ts\";\r\nimport { FindByAuthorController } from \"../../controllers/news/find-news-by-author-id-controller.ts\";\r\n\r\nexport function makeCreateNewsController() {\r\n  return {\r\n    createNewsController: new CreateNewsController(makeNewsRepository()),\r\n  };\r\n}\r\n\r\nexport function makeFindAllNewsController() {\r\n  return {\r\n    findAllNewsController: new FindAllNewsController(makeNewsRepository()),\r\n  };\r\n}\r\n\r\nexport function makeFindNewsByIdController() {\r\n  return {\r\n    findNewsByIdController: new FindNewsByIdController(makeNewsRepository()),\r\n  };\r\n}\r\n\r\nexport function makeFindNewsByAuthorIdController() {\r\n  return {\r\n    findNewsByAuthorIdController: new FindByAuthorController(\r\n      makeNewsRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeUpdateNewsController() {\r\n  return {\r\n    updateNewsController: new UpdateNewsController(makeNewsRepository()),\r\n  };\r\n}\r\n\r\nexport function makeDeleteNewsController() {\r\n  return {\r\n    deleteNewsController: new DeleteNewsController(makeNewsRepository()),\r\n  };\r\n}\r\n"],"mappings":"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","names":["http","express","cors","Router","router","_req","res","Router","ClerkExpressWithAuth","clerkAuth","clerkMiddleware","req","res","next","ClerkAuthController","req","res","auth","makeClerkAuthController","ClerkAuthController","router","Router","clerkMiddleware","req","res","clerkAuthController","makeClerkAuthController","Router","CreateUserController","clerkWebhookService","userRepository","req","res","event","eventType","created_at","birthday","last_sign_in_at","updated_at","email_addresses","rest","err","DeleteUserController","clerkWebhookService","userRepository","req","res","event","eventType","user","err","UpdateUserController","clerkWebhookService","userRepository","req","res","event","eventType","email_addresses","user","err","UserRepository","prisma","email_addresses","first_name","last_name","user","email","PrismaClient","prisma","makeUserRepository","UserRepository","prisma","Webhook","ClerkWebhookService","webhook","req","svixId","svixTimestamp","svixSignature","payload","headers","err","makeClerkWebhookService","secret","ClerkWebhookService","Webhook","config","makeCreateUserController","CreateUserController","makeClerkWebhookService","makeUserRepository","makeUpdateUserController","UpdateUserController","makeDeleteUserController","DeleteUserController","router","Router","req","res","createUserController","makeCreateUserController","updateUserController","makeUpdateUserController","deleteUserController","makeDeleteUserController","Router","CreateNewsController","newsRepository","req","res","title","content","author_id","news","error","UpdateNewsController","newsRepository","req","res","id","title","content","news","error","DeleteNewsController","newsRepository","req","res","id","error","NewsRepository","prisma","title","content","author_id","id","news","makeNewsRepository","NewsRepository","prisma","FindAllNewsController","newsRepository","_req","res","news","error","FindNewsByIdController","newsRepository","req","res","id","news","error","FindByAuthorController","newsRepository","req","res","author_id","news","error","makeCreateNewsController","CreateNewsController","makeNewsRepository","makeFindAllNewsController","FindAllNewsController","makeFindNewsByIdController","FindNewsByIdController","makeFindNewsByAuthorIdController","FindByAuthorController","makeUpdateNewsController","UpdateNewsController","makeDeleteNewsController","DeleteNewsController","routes","Router","req","res","createNewsController","makeCreateNewsController","findAllNewsController","makeFindAllNewsController","findNewsByIdController","makeFindNewsByIdController","findNewsByAuthorIdController","makeFindNewsByAuthorIdController","updateNewsController","makeUpdateNewsController","deleteNewsController","makeDeleteNewsController","app","express","corsOptions","cors","router","routes","server","http","app","PORT"]}