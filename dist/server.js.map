{"version":3,"sources":["../bin/server.ts","../src/app.ts","../src/routes/index-routes.ts","../src/routes/auth-routes.ts","../src/middlewares/clerk.ts","../src/controllers/clerk-auth-controller.ts","../src/factories/controllers/clerk.factory.ts","../src/routes/user-routes.ts","../src/controllers/user/create-user-controller.ts","../src/controllers/user/delete-user-controller.ts","../src/controllers/user/update-user.controller.ts","../src/repositories/user/user-repository.ts","../config/database.ts","../src/factories/repositories/user.factory.ts","../src/factories/services/clerk-webhook-service.factory.ts","../src/services/clerk-webhook/clerk-webhook.service.ts","../src/factories/controllers/user.factory.ts"],"sourcesContent":["import http, { type Server } from \"node:http\";\r\nimport { app } from \"../src/app.ts\";\r\n\r\nconst server: Server = http.createServer(app);\r\n\r\nconst PORT = 3_000;\r\n\r\nserver.listen(PORT, () => {\r\n  console.log(`🚀 Aplicação rodando na porta ${PORT}.`);\r\n});\r\n","import express, { type Application } from \"express\";\r\nimport cors, { type CorsOptions } from \"cors\";\r\nimport { indexRoutes } from \"./routes/index-routes.ts\";\r\nimport { authRoutes } from \"./routes/auth-routes.ts\";\r\nimport { userRoutes } from \"./routes/user-routes.ts\";\r\n\r\nconst app: Application = express();\r\n\r\nconst corsOptions: CorsOptions = {\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  origin: [\"http://localhost:3000\", \"https://rede-ct.vercel.app\"],\r\n  credentials: true,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.use(\"/\", indexRoutes);\r\napp.use(\"/auth\", authRoutes);\r\napp.use(\"/user\", userRoutes);\r\n\r\nexport { app };\r\n","import { Router, type Request, type Response } from \"express\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", (_req: Request, res: Response) => {\r\n  res.status(200).json({\r\n    message: \"Rede CT\",\r\n  });\r\n});\r\n\r\nexport { router as indexRoutes };\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport { clerkMiddleware } from \"../middlewares/clerk.ts\";\r\nimport { makeClerkAuthController } from \"../factories/controllers/clerk.factory.ts\";\r\n\r\nconst { clerkAuthController } = makeClerkAuthController();\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", clerkMiddleware, async (req: Request, res: Response) => {\r\n  await clerkAuthController.handle(req, res);\r\n});\r\n\r\nexport { router as authRoutes };\r\n","import { ClerkExpressWithAuth } from \"@clerk/clerk-sdk-node\";\r\nimport { type Request, type Response, type NextFunction } from \"express\";\r\n\r\nconst clerkAuth = ClerkExpressWithAuth();\r\n\r\nexport const clerkMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  return clerkAuth(req as any, res as any, next);\r\n};\r\n","import { type Request, type Response } from \"express\";\r\n\r\ninterface ClerkAuth {\r\n  userId: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport class ClerkAuthController {\r\n  async handle(req: Request, res: Response) {\r\n    const auth = (req as { auth?: ClerkAuth }).auth;\r\n\r\n    if (!auth || !auth.userId) {\r\n      res.status(401).json({ message: \"Não autenticado\" });\r\n      return;\r\n    }\r\n\r\n    // Se autenticado, envia resposta com status 200\r\n    res.status(200).json({\r\n      message: \"Usuário autenticado com Clerk\",\r\n      userId: auth.userId,\r\n    });\r\n  }\r\n}\r\n","import { ClerkAuthController } from \"../../controllers/clerk-auth-controller.ts\";\r\n\r\nexport function makeClerkAuthController() {\r\n  const clerkAuthController = new ClerkAuthController();\r\n\r\n  return { clerkAuthController };\r\n}\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport {\r\n  makeCreateUserController,\r\n  makeUpdateUserController,\r\n  makeDeleteUserController,\r\n} from \"../factories/controllers/user.factory.ts\";\r\n\r\nconst { createUserController } = makeCreateUserController();\r\nconst { updateUserController } = makeUpdateUserController();\r\nconst { deleteUserController } = makeDeleteUserController();\r\n\r\nconst router = Router();\r\n\r\nrouter.post(\r\n  \"/api/webhook/created-user\",\r\n  async (req: Request, res: Response) => {\r\n    await createUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.post(\r\n  \"/api/webhook/updated-user\",\r\n  async (req: Request, res: Response) => {\r\n    await updateUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.post(\r\n  \"/api/webhook/deleted-user\",\r\n  async (req: Request, res: Response) => {\r\n    await deleteUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nexport { router as userRoutes };\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserCreatedEvent } from \"../../models/user-created-event.js\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.js\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.js\";\r\n\r\nexport class CreateUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserCreatedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const {\r\n        type: eventType,\r\n        data: {\r\n          created_at,\r\n          birthday,\r\n          last_sign_in_at,\r\n          updated_at,\r\n          email_addresses,\r\n          ...rest\r\n        },\r\n      } = event;\r\n\r\n      if (eventType === \"user.created\") {\r\n        await this.userRepository.create({\r\n          created_at: new Date(created_at),\r\n          last_sign_in_at: new Date(last_sign_in_at),\r\n          updated_at: new Date(updated_at),\r\n          email_addresses: email_addresses,\r\n          ...rest,\r\n        });\r\n\r\n        return res.status(201).json({\r\n          message: \"Usuário criado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        return res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserDeletedEvent } from \"../../models/user-deleted-event.js\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.js\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.js\";\r\n\r\nexport class DeleteUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserDeletedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const { type: eventType, data: user } = event;\r\n\r\n      if (eventType === \"user.deleted\") {\r\n        await this.userRepository.delete(user);\r\n\r\n        res.status(200).json({\r\n          message: \"Usuário deletado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserUpdatedEvent } from \"../../models/user-updated-event.js\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.js\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.js\";\r\n\r\nexport class UpdateUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserUpdatedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const {\r\n        type: eventType,\r\n        data: { email_addresses, ...user },\r\n      } = event;\r\n\r\n      if (eventType === \"user.updated\") {\r\n        await this.userRepository.update({\r\n          ...user,\r\n          email_addresses: email_addresses,\r\n        });\r\n\r\n        res.status(200).json({\r\n          message: \"Usuário atualizado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { PrismaClient } from \"@prisma/client\";\r\nimport type { IUserRepository } from \"./iuser-repository.d.ts\";\r\nimport { IUserCreatedEvent } from \"../../models/user-created-event.js\";\r\nimport { IUserUpdatedEvent } from \"../../models/user-updated-event.js\";\r\nimport { IUserDeletedEvent } from \"../../models/user-deleted-event.js\";\r\n\r\nexport class UserRepository implements IUserRepository {\r\n  constructor(private readonly prisma: PrismaClient) {}\r\n\r\n  async create({\r\n    email_addresses,\r\n    first_name,\r\n    last_name,\r\n    ...user\r\n  }: IUserCreatedEvent[\"data\"]) {\r\n    await this.prisma.user.create({\r\n      data: {\r\n        ...user,\r\n        firstName: first_name,\r\n        lastName: last_name,\r\n        emailAddresses: {\r\n          create: email_addresses.map((email) => ({\r\n            emailAddress: email.email_address,\r\n            object: email.object,\r\n            verification: JSON.stringify(email.verification),\r\n            linkedTo: JSON.stringify(email.linked_to),\r\n            id: email.id,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(user: IUserUpdatedEvent[\"data\"]) {\r\n    await this.prisma.user.update({\r\n      where: { id: user.id },\r\n      data: {\r\n        ...user,\r\n        emailAddresses: {\r\n          update: user.email_addresses.map((email) => ({\r\n            where: { id: email.id },\r\n            data: {\r\n              emailAddress: email.email_address,\r\n              object: email.object,\r\n              verification: JSON.stringify(email.verification),\r\n              linkedTo: JSON.stringify(email.linked_to),\r\n            },\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(user: IUserDeletedEvent[\"data\"]) {\r\n    await this.prisma.user.delete({\r\n      where: { id: user.id },\r\n    });\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport { prisma };\r\n","import { UserRepository } from \"../../repositories/user/user-repository.ts\";\r\nimport { prisma } from \"../../../config/database.ts\";\r\n\r\nexport function makeUserRepository() {\r\n  return new UserRepository(prisma);\r\n}\r\n","import { Webhook } from \"svix\";\r\nimport { ClerkWebhookService } from \"../../services/clerk-webhook/clerk-webhook.service.ts\";\r\n\r\nexport function makeClerkWebhookService(secret: string) {\r\n  return new ClerkWebhookService(new Webhook(secret));\r\n}\r\n","import { type Request } from \"express\";\r\nimport { Webhook } from \"svix\";\r\nimport type { IClerkWebhookService } from \"./iclerk-webhook.js\";\r\n\r\nexport class ClerkWebhookService implements IClerkWebhookService {\r\n  constructor(private readonly webhook: Webhook) {}\r\n\r\n  async verifyEvent<T>(req: Request): Promise<T | undefined> {\r\n    const {\r\n      \"svix-id\": svixId,\r\n      \"svix-timestamp\": svixTimestamp,\r\n      \"svix-signature\": svixSignature,\r\n    } = req.headers;\r\n\r\n    if (!svixId || !svixTimestamp || !svixSignature) {\r\n      throw new Error(\"Headers are missing\");\r\n    }\r\n\r\n    const payload = JSON.stringify(req.body);\r\n\r\n    const headers = {\r\n      \"svix-id\": svixId as string,\r\n      \"svix-timestamp\": svixTimestamp as string,\r\n      \"svix-signature\": svixSignature as string,\r\n    };\r\n\r\n    try {\r\n      return this.webhook.verify(payload, headers) as T;\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        throw new Error(err.message);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CreateUserController } from \"../../controllers/user/create-user-controller.ts\";\r\nimport { DeleteUserController } from \"../../controllers/user/delete-user-controller.ts\";\r\nimport { UpdateUserController } from \"../../controllers/user/update-user.controller.ts\";\r\nimport { makeUserRepository } from \"../repositories/user.factory.ts\";\r\nimport { makeClerkWebhookService } from \"../services/clerk-webhook-service.factory.ts\";\r\nimport { config } from \"dotenv\";\r\nconfig();\r\n\r\nexport function makeCreateUserController() {\r\n  return {\r\n    createUserController: new CreateUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_CREATED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeUpdateUserController() {\r\n  return {\r\n    updateUserController: new UpdateUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_UPDATED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeDeleteUserController() {\r\n  return {\r\n    deleteUserController: new DeleteUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_DELETED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n"],"mappings":"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","names":["http","express","cors","Router","router","_req","res","Router","ClerkExpressWithAuth","clerkAuth","clerkMiddleware","req","res","next","ClerkAuthController","req","res","auth","makeClerkAuthController","ClerkAuthController","clerkAuthController","makeClerkAuthController","router","Router","clerkMiddleware","req","res","Router","CreateUserController","clerkWebhookService","userRepository","req","res","event","eventType","created_at","birthday","last_sign_in_at","updated_at","email_addresses","rest","err","DeleteUserController","clerkWebhookService","userRepository","req","res","event","eventType","user","err","UpdateUserController","clerkWebhookService","userRepository","req","res","event","eventType","email_addresses","user","err","UserRepository","prisma","email_addresses","first_name","last_name","user","email","PrismaClient","prisma","makeUserRepository","UserRepository","prisma","Webhook","ClerkWebhookService","webhook","req","svixId","svixTimestamp","svixSignature","payload","headers","err","makeClerkWebhookService","secret","ClerkWebhookService","Webhook","config","makeCreateUserController","CreateUserController","makeClerkWebhookService","makeUserRepository","makeUpdateUserController","UpdateUserController","makeDeleteUserController","DeleteUserController","createUserController","makeCreateUserController","updateUserController","makeUpdateUserController","deleteUserController","makeDeleteUserController","router","Router","req","res","app","express","corsOptions","cors","router","server","http","app","PORT"]}