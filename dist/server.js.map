{"version":3,"sources":["../bin/server.ts","../src/app.ts","../src/routes/index-routes.ts","../src/routes/auth-routes.ts","../src/middlewares/clerk.ts","../src/controllers/clerk-auth-controller.ts","../src/factories/controllers/clerk.factory.ts","../src/routes/user-routes.ts","../src/controllers/user/create-user-controller.ts","../src/controllers/user/delete-user-controller.ts","../src/controllers/user/update-user.controller.ts","../src/controllers/user/find-all-users-controller.ts","../src/repositories/user/user-repository.ts","../config/database.ts","../src/factories/repositories/user.factory.ts","../src/factories/services/clerk-webhook-service.factory.ts","../src/services/clerk-webhook/clerk-webhook.service.ts","../src/factories/controllers/user.factory.ts","../src/routes/news-routes.ts","../src/@types/file.ts","../src/controllers/news/create-news-controller.ts","../src/controllers/news/update-news-controller.ts","../src/controllers/news/delete-news-controller.ts","../src/repositories/news/news-repository.ts","../src/factories/repositories/news.factory.ts","../src/controllers/news/find-all-news-controller.ts","../src/controllers/news/find-news-by-id-controller.ts","../src/controllers/news/find-news-by-author-id-controller.ts","../src/services/firebase-storage/firebase-storage.service.ts","../config/firebase/index.ts","../config/firebase/storage.ts","../src/factories/services/firebase-storage.factory.ts","../src/factories/controllers/news.factory.ts","../src/middlewares/multer.ts","../src/routes/team-routes.ts","../src/controllers/team/create-team-controller.ts","../src/controllers/team/delete-team-controller.ts","../src/controllers/team/find-all-teams-controller.ts","../src/controllers/team/find-team-by-id-controller.ts","../src/controllers/team/find-team-by-type-controller.ts","../src/controllers/team/update-team-controller.ts","../src/repositories/team/team-repository.ts","../src/factories/controllers/team.factory.ts"],"sourcesContent":["import http, { type Server } from \"node:http\";\r\nimport { app } from \"../src/app.ts\";\r\n\r\nconst server: Server = http.createServer(app);\r\n\r\nconst PORT = 4_000;\r\n\r\nserver.listen(PORT, () => {\r\n  console.log(`üöÄ Aplica√ß√£o rodando na porta ${PORT}.`);\r\n});\r\n","import express, { type Application } from \"express\";\r\nimport cors, { type CorsOptions } from \"cors\";\r\nimport { indexRoutes } from \"./routes/index-routes.ts\";\r\nimport { authRoutes } from \"./routes/auth-routes.ts\";\r\nimport { userRoutes } from \"./routes/user-routes.ts\";\r\nimport { newsRoutes } from \"./routes/news-routes.ts\";\r\nimport { teamRoutes } from \"./routes/team-routes.ts\";\r\n\r\nconst app: Application = express();\r\n\r\nconst corsOptions: CorsOptions = {\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  origin: [\"http://localhost:3000\", \"https://rede-ct.vercel.app\"],\r\n  credentials: true,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.use(\"/\", indexRoutes);\r\napp.use(\"/auth\", authRoutes);\r\napp.use(\"/user\", userRoutes);\r\napp.use(\"/news\", newsRoutes);\r\napp.use(\"/team\", teamRoutes);\r\n\r\nexport { app };\r\n","import { Router, type Request, type Response } from \"express\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", (_req: Request, res: Response) => {\r\n  res.status(200).json({\r\n    message: \"Rede CT\",\r\n  });\r\n});\r\n\r\nexport { router as indexRoutes };\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport { clerkMiddleware } from \"../middlewares/clerk.ts\";\r\nimport { makeClerkAuthController } from \"../factories/controllers/clerk.factory.ts\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", clerkMiddleware, async (req: Request, res: Response) => {\r\n  const { clerkAuthController } = makeClerkAuthController();\r\n\r\n  await clerkAuthController.handle(req, res);\r\n});\r\n\r\nexport { router as authRoutes };\r\n","import { ClerkExpressWithAuth } from \"@clerk/clerk-sdk-node\";\r\nimport { type Request, type Response, type NextFunction } from \"express\";\r\n\r\nconst clerkAuth = ClerkExpressWithAuth();\r\n\r\nexport const clerkMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  return clerkAuth(req as any, res as any, next);\r\n};\r\n","import { type Request, type Response } from \"express\";\r\n\r\ninterface ClerkAuth {\r\n  userId: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport class ClerkAuthController {\r\n  async handle(req: Request, res: Response) {\r\n    const auth = (req as { auth?: ClerkAuth }).auth;\r\n\r\n    if (!auth || !auth.userId) {\r\n      res.status(401).json({ message: \"N√£o autenticado\" });\r\n      return;\r\n    }\r\n\r\n    // Se autenticado, envia resposta com status 200\r\n    res.status(200).json({\r\n      message: \"Usu√°rio autenticado com Clerk\",\r\n      userId: auth.userId,\r\n    });\r\n  }\r\n}\r\n","import { ClerkAuthController } from \"../../controllers/clerk-auth-controller.ts\";\r\n\r\nexport function makeClerkAuthController() {\r\n  const clerkAuthController = new ClerkAuthController();\r\n\r\n  return { clerkAuthController };\r\n}\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport {\r\n  makeCreateUserController,\r\n  makeUpdateUserController,\r\n  makeDeleteUserController,\r\n  makeFindAllUsersController,\r\n} from \"../factories/controllers/user.factory.ts\";\r\n\r\nconst { createUserController } = makeCreateUserController();\r\nconst { updateUserController } = makeUpdateUserController();\r\nconst { deleteUserController } = makeDeleteUserController();\r\n\r\nconst router = Router();\r\n\r\nrouter.post(\r\n  \"/api/webhook/created-user\",\r\n  async (req: Request, res: Response) => {\r\n    await createUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.post(\r\n  \"/api/webhook/updated-user\",\r\n  async (req: Request, res: Response) => {\r\n    await updateUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.post(\r\n  \"/api/webhook/deleted-user\",\r\n  async (req: Request, res: Response) => {\r\n    await deleteUserController.handle(req, res);\r\n  }\r\n);\r\n\r\nrouter.get(\"/\", async (req: Request, res: Response) => {\r\n  const { findAllUsersController } = makeFindAllUsersController();\r\n\r\n  await findAllUsersController.handle(req, res);\r\n});\r\n\r\nexport { router as userRoutes };\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserCreatedEvent } from \"../../events/user-created-event.js\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.d.ts\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.d.ts\";\r\n\r\nexport class CreateUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserCreatedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const {\r\n        type: eventType,\r\n        data: {\r\n          created_at,\r\n          birthday,\r\n          last_sign_in_at,\r\n          updated_at,\r\n          email_addresses,\r\n          ...rest\r\n        },\r\n      } = event;\r\n\r\n      if (eventType === \"user.created\") {\r\n        await this.userRepository.create({\r\n          created_at: new Date(created_at),\r\n          updated_at: new Date(updated_at),\r\n          email_addresses: email_addresses,\r\n          ...rest,\r\n        });\r\n\r\n        res.status(201).json({\r\n          message: \"Usu√°rio criado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserDeletedEvent } from \"../../events/user-deleted-event.js\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.d.ts\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.d.ts\";\r\n\r\nexport class DeleteUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserDeletedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const { type: eventType, data: user } = event;\r\n\r\n      if (eventType === \"user.deleted\") {\r\n        await this.userRepository.delete(user);\r\n\r\n        res.status(200).json({\r\n          message: \"Usu√°rio deletado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { IUserUpdatedEvent } from \"../../events/user-updated-event.js\";\r\nimport type { IClerkWebhookService } from \"../../services/clerk-webhook/iclerk-webhook.d.ts\";\r\nimport type { IUserRepository } from \"../../repositories/user/iuser-repository.d.ts\";\r\n\r\nexport class UpdateUserController {\r\n  constructor(\r\n    private readonly clerkWebhookService: IClerkWebhookService,\r\n    private readonly userRepository: IUserRepository\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const event =\r\n        await this.clerkWebhookService.verifyEvent<IUserUpdatedEvent>(req);\r\n\r\n      if (!event) throw new Error(\"Erro ao verificar webhook.\");\r\n\r\n      const {\r\n        type: eventType,\r\n        data: { email_addresses, ...user },\r\n      } = event;\r\n\r\n      if (eventType === \"user.updated\") {\r\n        await this.userRepository.update({\r\n          ...user,\r\n          email_addresses: email_addresses,\r\n        });\r\n\r\n        res.status(200).json({\r\n          message: \"Usu√°rio atualizado com sucesso.\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        res.status(400).json({\r\n          message: err.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Request, Response } from \"express\";\r\nimport { UserRepository } from \"../../repositories/user/user-repository.ts\";\r\n\r\nexport class FindAllUsersController {\r\n  constructor(private readonly userRepository: UserRepository) {}\r\n\r\n  async handle(_req: Request, res: Response) {\r\n    try {\r\n      const users = await this.userRepository.findAll();\r\n\r\n      return res.status(200).json(users);\r\n    } catch (error) {\r\n      return res.status(500).json({ message: \"Erro ao buscar usu√°rios\" });\r\n    }\r\n  }\r\n}\r\n","import type { PrismaClient } from \"@prisma/client\";\r\nimport type { IUserRepository } from \"./iuser-repository.d.ts\";\r\nimport type { IUserDeletedDTO, IUserDTO } from \"../../dto/user.d.ts\";\r\n\r\nexport class UserRepository implements IUserRepository {\r\n  constructor(private readonly prisma: PrismaClient) {}\r\n\r\n  async create({ email_addresses, first_name, last_name, ...user }: IUserDTO) {\r\n    await this.prisma.user.create({\r\n      data: {\r\n        first_name: first_name,\r\n        last_name: last_name,\r\n        id: user.id,\r\n        created_at: user.created_at,\r\n        updated_at: user.updated_at,\r\n        image_url: user.image_url,\r\n        profile_image_url: user.profile_image_url,\r\n\r\n        email_addresses: {\r\n          create: email_addresses.map((email) => ({\r\n            email_address: email.email_address,\r\n            linked_to: JSON.stringify(email.linked_to),\r\n            id: email.id,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(user: IUserDTO) {\r\n    await this.prisma.user.update({\r\n      where: { id: user.id },\r\n      data: {\r\n        first_name: user.first_name,\r\n        last_name: user.last_name,\r\n        image_url: user.image_url,\r\n        profile_image_url: user.profile_image_url,\r\n\r\n        email_addresses: {\r\n          update: user.email_addresses.map((email) => ({\r\n            where: { id: email.id },\r\n            data: {\r\n              email_address: email.email_address,\r\n              linked_to: JSON.stringify(email.linked_to),\r\n            },\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(user: IUserDeletedDTO) {\r\n    await this.prisma.user.delete({\r\n      where: { id: user.id },\r\n    });\r\n  }\r\n\r\n  async findAll() {\r\n    return await this.prisma.user.findMany({\r\n      include: {\r\n        email_addresses: true,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport { prisma };\r\n","import { UserRepository } from \"../../repositories/user/user-repository.ts\";\r\nimport { prisma } from \"../../../config/database.ts\";\r\n\r\nexport function makeUserRepository() {\r\n  return new UserRepository(prisma);\r\n}\r\n","import { Webhook } from \"svix\";\r\nimport { ClerkWebhookService } from \"../../services/clerk-webhook/clerk-webhook.service.ts\";\r\n\r\nexport function makeClerkWebhookService(secret: string) {\r\n  return new ClerkWebhookService(new Webhook(secret));\r\n}\r\n","import { type Request } from \"express\";\r\nimport { Webhook } from \"svix\";\r\nimport type { IClerkWebhookService } from \"./iclerk-webhook.js\";\r\n\r\nexport class ClerkWebhookService implements IClerkWebhookService {\r\n  constructor(private readonly webhook: Webhook) {}\r\n\r\n  async verifyEvent<T>(req: Request): Promise<T | undefined> {\r\n    const {\r\n      \"svix-id\": svixId,\r\n      \"svix-timestamp\": svixTimestamp,\r\n      \"svix-signature\": svixSignature,\r\n    } = req.headers;\r\n\r\n    if (!svixId || !svixTimestamp || !svixSignature) {\r\n      throw new Error(\"Headers are missing\");\r\n    }\r\n\r\n    const payload = JSON.stringify(req.body);\r\n\r\n    const headers = {\r\n      \"svix-id\": svixId as string,\r\n      \"svix-timestamp\": svixTimestamp as string,\r\n      \"svix-signature\": svixSignature as string,\r\n    };\r\n\r\n    try {\r\n      return this.webhook.verify(payload, headers) as T;\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        throw new Error(err.message);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CreateUserController } from \"../../controllers/user/create-user-controller.ts\";\r\nimport { DeleteUserController } from \"../../controllers/user/delete-user-controller.ts\";\r\nimport { UpdateUserController } from \"../../controllers/user/update-user.controller.ts\";\r\nimport { FindAllUsersController } from \"../../controllers/user/find-all-users-controller.ts\";\r\nimport { makeUserRepository } from \"../repositories/user.factory.ts\";\r\nimport { makeClerkWebhookService } from \"../services/clerk-webhook-service.factory.ts\";\r\nimport { config } from \"dotenv\";\r\nconfig();\r\n\r\nexport function makeCreateUserController() {\r\n  return {\r\n    createUserController: new CreateUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_CREATED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeUpdateUserController() {\r\n  return {\r\n    updateUserController: new UpdateUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_UPDATED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeDeleteUserController() {\r\n  return {\r\n    deleteUserController: new DeleteUserController(\r\n      makeClerkWebhookService(process.env.CLERK_USER_DELETED as string),\r\n      makeUserRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeFindAllUsersController() {\r\n  return {\r\n    findAllUsersController: new FindAllUsersController(makeUserRepository()),\r\n  };\r\n}\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport {\r\n  makeCreateNewsController,\r\n  makeDeleteNewsController,\r\n  makeFindAllNewsController,\r\n  makeFindNewsByAuthorIdController,\r\n  makeFindNewsByIdController,\r\n  makeUpdateNewsController,\r\n} from \"../factories/controllers/news.factory.ts\";\r\nimport { upload } from \"../middlewares/multer.ts\";\r\n\r\nconst routes = Router();\r\n\r\nroutes.post(\r\n  \"/\",\r\n  upload.single(\"image\"),\r\n  async (req: Request, res: Response) => {\r\n    const { createNewsController } = makeCreateNewsController();\r\n\r\n    await createNewsController.handle(req, res);\r\n  }\r\n);\r\n\r\nroutes.get(\"/\", async (req: Request, res: Response) => {\r\n  const { findAllNewsController } = makeFindAllNewsController();\r\n\r\n  await findAllNewsController.handle(req, res);\r\n});\r\n\r\nroutes.get(\"/:id\", async (req: Request, res: Response) => {\r\n  const { findNewsByIdController } = makeFindNewsByIdController();\r\n\r\n  await findNewsByIdController.handle(req, res);\r\n});\r\n\r\nroutes.get(\"/author/:author_id\", async (req: Request, res: Response) => {\r\n  const { findNewsByAuthorIdController } = makeFindNewsByAuthorIdController();\r\n\r\n  await findNewsByAuthorIdController.handle(req, res);\r\n});\r\n\r\nroutes.put(\r\n  \"/:id\",\r\n  upload.single(\"image\"),\r\n  async (req: Request, res: Response) => {\r\n    const { updateNewsController } = makeUpdateNewsController();\r\n\r\n    await updateNewsController.handle(req, res);\r\n  }\r\n);\r\n\r\nroutes.delete(\"/:id\", async (req: Request, res: Response) => {\r\n  const { deleteNewsController } = makeDeleteNewsController();\r\n\r\n  await deleteNewsController.handle(req, res);\r\n});\r\n\r\nexport { routes as newsRoutes };\r\n","export const File = {\r\n  NEWS: \"news\",\r\n} as const;\r\n\r\nexport type FileType = (typeof File)[keyof typeof File];\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\nimport type { IFirebaseStorageService } from \"../../services/firebase-storage/ifirebase-storage.js\";\r\nimport { File } from \"../../@types/file.ts\";\r\n\r\nexport class CreateNewsController {\r\n  constructor(\r\n    private readonly newsRepository: INewsRepository,\r\n    private readonly firebaseStorageService: IFirebaseStorageService\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { title, content, author_id } = req.body;\r\n\r\n      const image_url = await this.firebaseStorageService.uploadFile(\r\n        req,\r\n        File.NEWS\r\n      );\r\n\r\n      const news = await this.newsRepository.create({\r\n        title,\r\n        content,\r\n        author_id,\r\n        image_url,\r\n      });\r\n\r\n      res.status(201).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\nimport type { IFirebaseStorageService } from \"../../services/firebase-storage/ifirebase-storage.js\";\r\nimport { File } from \"../../@types/file.ts\";\r\n\r\nexport class UpdateNewsController {\r\n  constructor(\r\n    private readonly newsRepository: INewsRepository,\r\n    private readonly firebaseStorageService: IFirebaseStorageService\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      const { title, content, image_url } = req.body;\r\n\r\n      let newImageUrl: string | undefined;\r\n\r\n      if (image_url) {\r\n        newImageUrl = await this.firebaseStorageService.updateFile(\r\n          req,\r\n          File.NEWS\r\n        );\r\n      }\r\n\r\n      const news = await this.newsRepository.update({\r\n        id,\r\n        title,\r\n        content,\r\n        image_url: newImageUrl,\r\n      });\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\nimport type { IFirebaseStorageService } from \"../../services/firebase-storage/ifirebase-storage.js\";\r\nexport class DeleteNewsController {\r\n  constructor(\r\n    private readonly newsRepository: INewsRepository,\r\n    private readonly firebaseStorageService: IFirebaseStorageService\r\n  ) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      await Promise.all([\r\n        this.newsRepository.delete(id),\r\n        this.firebaseStorageService.deleteFile(req),\r\n      ]);\r\n\r\n      res.status(200).json({\r\n        message: \"Not√≠cia deletada com sucesso.\",\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { News, PrismaClient } from \"@prisma/client\";\r\nimport type { INewsDTO, IUpdateNewsDTO } from \"../../dto/news.js\";\r\nimport type { INewsRepository } from \"./inews-repository.d.ts\";\r\n\r\nexport class NewsRepository implements INewsRepository {\r\n  constructor(private readonly prisma: PrismaClient) {}\r\n\r\n  async create({\r\n    title,\r\n    content,\r\n    author_id,\r\n    image_url,\r\n  }: INewsDTO): Promise<News> {\r\n    return await this.prisma.news.create({\r\n      data: {\r\n        title,\r\n        content,\r\n        author_id,\r\n        image_url,\r\n      },\r\n      include: {\r\n        author: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findAll(): Promise<News[]> {\r\n    return await this.prisma.news.findMany({\r\n      include: {\r\n        author: true,\r\n      },\r\n      orderBy: {\r\n        created_at: \"desc\",\r\n      },\r\n    });\r\n  }\r\n\r\n  async findById(id: string): Promise<News | null> {\r\n    return await this.prisma.news.findUnique({\r\n      where: {\r\n        id,\r\n      },\r\n      include: {\r\n        author: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findByAuthorId(author_id: string): Promise<News[]> {\r\n    return await this.prisma.news.findMany({\r\n      where: {\r\n        author_id,\r\n      },\r\n      orderBy: {\r\n        created_at: \"desc\",\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(news: IUpdateNewsDTO): Promise<News> {\r\n    return await this.prisma.news.update({\r\n      where: {\r\n        id: news.id,\r\n      },\r\n      data: {\r\n        title: news.title,\r\n        content: news.content,\r\n        ...(news.image_url && {\r\n          image_url: news.image_url,\r\n        }),\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(id: string): Promise<void> {\r\n    await this.prisma.news.delete({\r\n      where: {\r\n        id,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { NewsRepository } from \"../../repositories/news/news-repository.ts\";\r\nimport { prisma } from \"../../../config/database.ts\";\r\n\r\nexport function makeNewsRepository() {\r\n  return new NewsRepository(prisma);\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class FindAllNewsController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(_req: Request, res: Response) {\r\n    try {\r\n      const news = await this.newsRepository.findAll();\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.d.ts\";\r\n\r\nexport class FindNewsByIdController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      const news = await this.newsRepository.findById(id);\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { INewsRepository } from \"../../repositories/news/inews-repository.js\";\r\n\r\nexport class FindByAuthorController {\r\n  constructor(private readonly newsRepository: INewsRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { author_id } = req.params;\r\n\r\n      const news = await this.newsRepository.findByAuthorId(author_id);\r\n\r\n      res.status(200).json(news);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { Bucket } from \"@google-cloud/storage\";\r\nimport type { IFirebaseStorageService } from \"./ifirebase-storage.d.ts\";\r\nimport type { FileType } from \"../../@types/file.d.ts\";\r\nimport { type Request } from \"express\";\r\nimport { randomUUID } from \"node:crypto\";\r\nexport class FirebaseStorageService implements IFirebaseStorageService {\r\n  constructor(private readonly bucket: Bucket) {}\r\n\r\n  async uploadFile(req: Request, fileType: FileType): Promise<string> {\r\n    if (!req.file) {\r\n      throw new Error(\"Arquivo n√£o encontrado.\");\r\n    }\r\n\r\n    const file = req.file;\r\n    const author_id = req.body.author_id;\r\n\r\n    const fileName = `${randomUUID()}-${file?.originalname}`;\r\n\r\n    const fileRef = this.bucket.file(\r\n      `images/${fileType}/${author_id}/${fileName}`\r\n    );\r\n\r\n    const fileStream = fileRef.createWriteStream({\r\n      metadata: {\r\n        contentType: file?.mimetype,\r\n      },\r\n    });\r\n\r\n    fileStream.on(\"error\", (error) => {\r\n      console.log(error);\r\n    });\r\n\r\n    fileStream.on(\"finish\", async () => {\r\n      await fileRef.makePublic();\r\n    });\r\n\r\n    fileStream.end(file?.buffer);\r\n\r\n    const downloadUrl = `https://storage.googleapis.com/${this.bucket.name}/${fileRef.name}`;\r\n\r\n    return downloadUrl;\r\n  }\r\n\r\n  async updateFile(req: Request, fileType: FileType): Promise<string> {\r\n    if (!req.file) {\r\n      throw new Error(\"Arquivo n√£o encontrado.\");\r\n    }\r\n\r\n    try {\r\n      const filePath = this.getPath(req.body.image_url);\r\n\r\n      if (!filePath) {\r\n        throw new Error(\"Arquivo n√£o encontrado.\");\r\n      }\r\n\r\n      const [_, newImageUrl] = await Promise.all([\r\n        this.bucket.file(filePath).delete(),\r\n        this.uploadFile(req, fileType),\r\n      ]);\r\n\r\n      return newImageUrl;\r\n    } catch (error) {\r\n      throw new Error(\"Erro ao atualizar o arquivo.\");\r\n    }\r\n  }\r\n\r\n  async deleteFile(req: Request): Promise<void> {\r\n    if (!req.body.image_url) {\r\n      throw new Error(\"Arquivo n√£o encontrado.\");\r\n    }\r\n\r\n    const filePath = this.getPath(req.body.image_url);\r\n\r\n    if (!filePath) {\r\n      throw new Error(\"Arquivo n√£o encontrado.\");\r\n    }\r\n\r\n    try {\r\n      await this.bucket.file(filePath).delete();\r\n    } catch (error) {\r\n      throw new Error(\"Erro ao deletar o arquivo.\");\r\n    }\r\n  }\r\n\r\n  getPath(imageUrl: string): string | null {\r\n    const match = imageUrl.match(/\\/images\\/.+$/);\r\n    return match ? match[0].slice(1) : null;\r\n  }\r\n}\r\n","import admin, { type ServiceAccount } from \"firebase-admin\";\r\nimport { config } from \"dotenv\";\r\nconfig();\r\n\r\nconst app = admin.initializeApp({\r\n  credential: admin.credential.cert({\r\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n    privateKey: process.env.FIREBASE_PRIVATE_KEY,\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    type: process.env.FIREBASE_TYPE,\r\n    privateKeyId: process.env.FIREBASE_PRIVATE_KEY_ID,\r\n    clientId: process.env.FIREBASE_CLIENT_ID,\r\n    authUri: process.env.FIREBASE_AUTH_URI,\r\n    tokenUri: process.env.FIREBASE_TOKEN_URI,\r\n    authProviderX509CertUrl: process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,\r\n    clientX509CertUrl: process.env.FIREBASE_CLIENT_X509_CERT_URL,\r\n  } as ServiceAccount),\r\n  storageBucket: process.env.FIREBASE_BUCKET,\r\n});\r\n\r\nif (app.name) {\r\n  console.log(\"üî• Firebase conectado com sucesso!\");\r\n} else {\r\n  console.error(\"‚ùå Erro ao se conectar ao Firebase.\");\r\n}\r\n\r\nexport { app };\r\n","import { app } from \"./index.ts\";\r\nimport { getStorage } from \"firebase-admin/storage\";\r\n\r\nconst storage = getStorage(app);\r\n\r\nconst bucket = storage.bucket(\r\n  process.env.FIREBASE_BUCKET\r\n) as unknown as ReturnType<typeof storage.bucket>;\r\n\r\nexport { bucket };\r\n","import { FirebaseStorageService } from \"../../services/firebase-storage/firebase-storage.service.ts\";\r\nimport { bucket } from \"../../../config/firebase/storage.ts\";\r\nimport type { Bucket } from \"@google-cloud/storage\";\r\n\r\nexport function makeFirebaseStorageService() {\r\n  return new FirebaseStorageService(bucket as unknown as Bucket);\r\n}\r\n","import { CreateNewsController } from \"../../controllers/news/create-news-controller.ts\";\r\nimport { UpdateNewsController } from \"../../controllers/news/update-news-controller.ts\";\r\nimport { DeleteNewsController } from \"../../controllers/news/delete-news-controller.ts\";\r\nimport { makeNewsRepository } from \"../repositories/news.factory.ts\";\r\nimport { FindAllNewsController } from \"../../controllers/news/find-all-news-controller.ts\";\r\nimport { FindNewsByIdController } from \"../../controllers/news/find-news-by-id-controller.ts\";\r\nimport { FindByAuthorController } from \"../../controllers/news/find-news-by-author-id-controller.ts\";\r\nimport { makeFirebaseStorageService } from \"../services/firebase-storage.factory.ts\";\r\n\r\nexport function makeCreateNewsController() {\r\n  return {\r\n    createNewsController: new CreateNewsController(\r\n      makeNewsRepository(),\r\n      makeFirebaseStorageService()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeFindAllNewsController() {\r\n  return {\r\n    findAllNewsController: new FindAllNewsController(makeNewsRepository()),\r\n  };\r\n}\r\n\r\nexport function makeFindNewsByIdController() {\r\n  return {\r\n    findNewsByIdController: new FindNewsByIdController(makeNewsRepository()),\r\n  };\r\n}\r\n\r\nexport function makeFindNewsByAuthorIdController() {\r\n  return {\r\n    findNewsByAuthorIdController: new FindByAuthorController(\r\n      makeNewsRepository()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeUpdateNewsController() {\r\n  return {\r\n    updateNewsController: new UpdateNewsController(\r\n      makeNewsRepository(),\r\n      makeFirebaseStorageService()\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeDeleteNewsController() {\r\n  return {\r\n    deleteNewsController: new DeleteNewsController(\r\n      makeNewsRepository(),\r\n      makeFirebaseStorageService()\r\n    ),\r\n  };\r\n}\r\n","import multer from \"multer\";\r\n\r\nexport const upload = multer({\r\n  storage: multer.memoryStorage(),\r\n});\r\n","import { Router, type Request, type Response } from \"express\";\r\nimport {\r\n  makeCreateTeamController,\r\n  makeDeleteTeamController,\r\n  makeFindAllTeamsController,\r\n  makeFindTeamByIdController,\r\n  makeFindTeamByTypeController,\r\n  makeUpdateTeamController,\r\n} from \"../factories/controllers/team.factory.ts\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/\", async (req: Request, res: Response) => {\r\n  const { findAllTeamsController } = makeFindAllTeamsController();\r\n\r\n  await findAllTeamsController.handle(req, res);\r\n});\r\n\r\nrouter.get(\"/id/:id\", async (req: Request, res: Response) => {\r\n  const { findTeamByIdController } = makeFindTeamByIdController();\r\n\r\n  await findTeamByIdController.handle(req, res);\r\n});\r\n\r\nrouter.get(\"/type/:type\", async (req: Request, res: Response) => {\r\n  const { findTeamByTypeController } = makeFindTeamByTypeController();\r\n\r\n  await findTeamByTypeController.handle(req, res);\r\n});\r\n\r\nrouter.post(\"/\", async (req: Request, res: Response) => {\r\n  const { createTeamController } = makeCreateTeamController();\r\n\r\n  await createTeamController.handle(req, res);\r\n});\r\n\r\nrouter.put(\"/:id\", async (req: Request, res: Response) => {\r\n  const { updateTeamController } = makeUpdateTeamController();\r\n\r\n  await updateTeamController.handle(req, res);\r\n});\r\n\r\nrouter.delete(\"/:id\", async (req: Request, res: Response) => {\r\n  const { deleteTeamController } = makeDeleteTeamController();\r\n\r\n  await deleteTeamController.handle(req, res);\r\n});\r\n\r\nexport { router as teamRoutes };\r\n","import { type Request, type Response } from \"express\";\r\nimport type { ITeamRepository } from \"../../repositories/team/iteam-repository.d.ts\";\r\n\r\nexport class CreateTeamController {\r\n  constructor(private teamRepository: ITeamRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { name, type, members } = req.body;\r\n\r\n      const team = await this.teamRepository.create({\r\n        name,\r\n        type,\r\n        members,\r\n      });\r\n\r\n      res.status(201).json(team);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { ITeamRepository } from \"../../repositories/team/iteam-repository.d.ts\";\r\n\r\nexport class DeleteTeamController {\r\n  constructor(private readonly teamRepository: ITeamRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      await this.teamRepository.delete(id);\r\n\r\n      res.status(200).json({\r\n        message: \"Equipe deletada com sucesso\",\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        res.status(500).json({\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { ITeamRepository } from \"../../repositories/team/iteam-repository.js\";\r\n\r\nexport class FindAllController {\r\n  constructor(private readonly teamRepository: ITeamRepository) {}\r\n\r\n  async handle(_req: Request, res: Response) {\r\n    try {\r\n      const teams = await this.teamRepository.findAll();\r\n\r\n      return res.status(200).json(teams);\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        message: \"Internal server error\",\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { ITeamRepository } from \"../../repositories/team/iteam-repository.js\";\r\n\r\nexport class FindTeamByIdController {\r\n  constructor(private readonly teamRepository: ITeamRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      const team = await this.teamRepository.findById(id);\r\n\r\n      res.status(200).json(team);\r\n    } catch (error) {\r\n      res.status(500).json({\r\n        message: \"Internal server error\",\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport type { ITeamRepository } from \"../../repositories/team/iteam-repository.js\";\r\n\r\nexport class FindTeamByTypeController {\r\n  constructor(private readonly teamRepository: ITeamRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { type } = req.params;\r\n\r\n      const team = await this.teamRepository.findByType(type);\r\n\r\n      res.status(200).json(team);\r\n    } catch (error) {\r\n      res.status(500).json({\r\n        message: \"Internal server error\",\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { type Request, type Response } from \"express\";\r\nimport { ITeamRepository } from \"../../repositories/team/iteam-repository.js\";\r\n\r\nexport class UpdateTeamController {\r\n  constructor(private readonly teamRepository: ITeamRepository) {}\r\n\r\n  async handle(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const { name, members } = req.body;\r\n\r\n      const team = await this.teamRepository.update({\r\n        id,\r\n        name,\r\n        members,\r\n      });\r\n\r\n      res.status(200).json(team);\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      if (error instanceof Error) {\r\n        res.status(500).json({\r\n          message: \"Erro ao atualizar equipe\",\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { PrismaClient, type Team } from \"@prisma/client\";\r\nimport type { ICreateTeamDTO, IUpdateTeamDTO } from \"../../dto/team.d.ts\";\r\nimport type { ITeamRepository } from \"./iteam-repository.d.ts\";\r\n\r\nexport class TeamRepository implements ITeamRepository {\r\n  constructor(private readonly prisma: PrismaClient) {}\r\n\r\n  async create(team: ICreateTeamDTO): Promise<Team> {\r\n    return await this.prisma.team.create({\r\n      data: {\r\n        name: team.name,\r\n        type: team.type,\r\n        team_members: {\r\n          create: team.members.map((member) => ({\r\n            name: member.name,\r\n            role: member.role,\r\n            user_id: member.user_id,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async findAll(): Promise<Team[]> {\r\n    return await this.prisma.team.findMany({\r\n      include: {\r\n        team_members: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findById(id: string): Promise<Team | null> {\r\n    return await this.prisma.team.findUnique({\r\n      where: {\r\n        id,\r\n      },\r\n      include: {\r\n        team_members: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findByType(type: string): Promise<Team[] | null> {\r\n    return await this.prisma.team.findMany({\r\n      where: {\r\n        type,\r\n      },\r\n      include: {\r\n        team_members: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(team: IUpdateTeamDTO): Promise<Team> {\r\n    const existingMembers = await this.prisma.teamMember.findMany({\r\n      where: {\r\n        team_id: team.id,\r\n      },\r\n    });\r\n\r\n    const incomingIds = team.members.map((member) => member.id);\r\n\r\n    const membersToDelete = existingMembers.filter(\r\n      (member) => !incomingIds.includes(member.id)\r\n    );\r\n\r\n    for (const member of membersToDelete) {\r\n      await this.prisma.teamMember.delete({\r\n        where: {\r\n          id: member.id,\r\n        },\r\n      });\r\n    }\r\n\r\n    for (const member of team.members) {\r\n      const memberData = {\r\n        name: member.name,\r\n        role: member.role,\r\n        user_id: member.user_id,\r\n      };\r\n\r\n      if (member.id) {\r\n        await this.prisma.teamMember.upsert({\r\n          where: {\r\n            id: member.id,\r\n          },\r\n          update: memberData,\r\n          create: {\r\n            ...memberData,\r\n            team_id: team.id,\r\n          },\r\n        });\r\n      } else {\r\n        await this.prisma.teamMember.create({\r\n          data: {\r\n            ...memberData,\r\n            team_id: team.id,\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    return await this.prisma.team.update({\r\n      where: {\r\n        id: team.id,\r\n      },\r\n      data: {\r\n        name: team.name,\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(id: string): Promise<void> {\r\n    await this.prisma.team.delete({\r\n      where: {\r\n        id,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { prisma } from \"../../../config/database.ts\";\r\nimport { CreateTeamController } from \"../../controllers/team/create-team-controller.ts\";\r\nimport { DeleteTeamController } from \"../../controllers/team/delete-team-controller.ts\";\r\nimport { FindAllController } from \"../../controllers/team/find-all-teams-controller.ts\";\r\nimport { FindTeamByIdController } from \"../../controllers/team/find-team-by-id-controller.ts\";\r\nimport { FindTeamByTypeController } from \"../../controllers/team/find-team-by-type-controller.ts\";\r\nimport { UpdateTeamController } from \"../../controllers/team/update-team-controller.ts\";\r\nimport { TeamRepository } from \"../../repositories/team/team-repository.ts\";\r\n\r\nexport function makeFindAllTeamsController() {\r\n  return {\r\n    findAllTeamsController: new FindAllController(new TeamRepository(prisma)),\r\n  };\r\n}\r\n\r\nexport function makeFindTeamByIdController() {\r\n  return {\r\n    findTeamByIdController: new FindTeamByIdController(\r\n      new TeamRepository(prisma)\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeFindTeamByTypeController() {\r\n  return {\r\n    findTeamByTypeController: new FindTeamByTypeController(\r\n      new TeamRepository(prisma)\r\n    ),\r\n  };\r\n}\r\n\r\nexport function makeCreateTeamController() {\r\n  return {\r\n    createTeamController: new CreateTeamController(new TeamRepository(prisma)),\r\n  };\r\n}\r\n\r\nexport function makeUpdateTeamController() {\r\n  return {\r\n    updateTeamController: new UpdateTeamController(new TeamRepository(prisma)),\r\n  };\r\n}\r\n\r\nexport function makeDeleteTeamController() {\r\n  return {\r\n    deleteTeamController: new DeleteTeamController(new TeamRepository(prisma)),\r\n  };\r\n}\r\n"],"mappings":"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","names":["http","express","cors","Router","router","_req","res","Router","ClerkExpressWithAuth","clerkAuth","clerkMiddleware","req","res","next","ClerkAuthController","req","res","auth","makeClerkAuthController","ClerkAuthController","router","Router","clerkMiddleware","req","res","clerkAuthController","makeClerkAuthController","Router","CreateUserController","clerkWebhookService","userRepository","req","res","event","eventType","created_at","birthday","last_sign_in_at","updated_at","email_addresses","rest","err","DeleteUserController","clerkWebhookService","userRepository","req","res","event","eventType","user","err","UpdateUserController","clerkWebhookService","userRepository","req","res","event","eventType","email_addresses","user","err","FindAllUsersController","userRepository","_req","res","users","UserRepository","prisma","email_addresses","first_name","last_name","user","email","PrismaClient","prisma","makeUserRepository","UserRepository","prisma","Webhook","ClerkWebhookService","webhook","req","svixId","svixTimestamp","svixSignature","payload","headers","err","makeClerkWebhookService","secret","ClerkWebhookService","Webhook","config","makeCreateUserController","CreateUserController","makeClerkWebhookService","makeUserRepository","makeUpdateUserController","UpdateUserController","makeDeleteUserController","DeleteUserController","makeFindAllUsersController","FindAllUsersController","createUserController","makeCreateUserController","updateUserController","makeUpdateUserController","deleteUserController","makeDeleteUserController","router","Router","req","res","findAllUsersController","makeFindAllUsersController","Router","File","CreateNewsController","newsRepository","firebaseStorageService","req","res","title","content","author_id","image_url","File","news","error","UpdateNewsController","newsRepository","firebaseStorageService","req","res","id","title","content","image_url","newImageUrl","File","news","error","DeleteNewsController","newsRepository","firebaseStorageService","req","res","id","error","NewsRepository","prisma","title","content","author_id","image_url","id","news","makeNewsRepository","NewsRepository","prisma","FindAllNewsController","newsRepository","_req","res","news","error","FindNewsByIdController","newsRepository","req","res","id","news","error","FindByAuthorController","newsRepository","req","res","author_id","news","error","randomUUID","FirebaseStorageService","bucket","req","fileType","file","author_id","fileName","fileRef","fileStream","error","filePath","_","newImageUrl","imageUrl","match","admin","config","app","getStorage","storage","app","bucket","makeFirebaseStorageService","FirebaseStorageService","bucket","makeCreateNewsController","CreateNewsController","makeNewsRepository","makeFirebaseStorageService","makeFindAllNewsController","FindAllNewsController","makeFindNewsByIdController","FindNewsByIdController","makeFindNewsByAuthorIdController","FindByAuthorController","makeUpdateNewsController","UpdateNewsController","makeDeleteNewsController","DeleteNewsController","multer","upload","routes","Router","upload","req","res","createNewsController","makeCreateNewsController","findAllNewsController","makeFindAllNewsController","findNewsByIdController","makeFindNewsByIdController","findNewsByAuthorIdController","makeFindNewsByAuthorIdController","updateNewsController","makeUpdateNewsController","deleteNewsController","makeDeleteNewsController","Router","CreateTeamController","teamRepository","req","res","name","type","members","team","error","DeleteTeamController","teamRepository","req","res","id","error","FindAllController","teamRepository","_req","res","teams","FindTeamByIdController","teamRepository","req","res","id","team","FindTeamByTypeController","teamRepository","req","res","type","team","UpdateTeamController","teamRepository","req","res","id","name","members","team","error","TeamRepository","prisma","team","member","id","type","existingMembers","incomingIds","membersToDelete","memberData","makeFindAllTeamsController","FindAllController","TeamRepository","prisma","makeFindTeamByIdController","FindTeamByIdController","makeFindTeamByTypeController","FindTeamByTypeController","makeCreateTeamController","CreateTeamController","makeUpdateTeamController","UpdateTeamController","makeDeleteTeamController","DeleteTeamController","router","Router","req","res","findAllTeamsController","makeFindAllTeamsController","findTeamByIdController","makeFindTeamByIdController","findTeamByTypeController","makeFindTeamByTypeController","createTeamController","makeCreateTeamController","updateTeamController","makeUpdateTeamController","deleteTeamController","makeDeleteTeamController","app","express","corsOptions","cors","router","routes","server","http","app","PORT"]}