import Le from"node:http";import G from"express";import Oe from"cors";import{Router as Ie}from"express";var z=Ie();z.get("/",(o,e)=>{e.status(200).json({message:"Rede CT"})});import{Router as Ee}from"express";import{ClerkExpressWithAuth as ke}from"@clerk/clerk-sdk-node";var Ce=ke(),Q=(o,e,t)=>Ce(o,e,t);var g=class{async handle(e,t){let r=e.auth;if(!r||!r.userId){t.status(401).json({message:"N\xE3o autenticado"});return}t.status(200).json({message:"Usu\xE1rio autenticado com Clerk",userId:r.userId})}};function Z(){return{clerkAuthController:new g}}var H=Ee();H.get("/",Q,async(o,e)=>{let{clerkAuthController:t}=Z();await t.handle(o,e)});import{Router as Se}from"express";var T=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:{created_at:a,birthday:i,last_sign_in_at:m,updated_at:R,email_addresses:h,...y}}=r;s==="user.created"&&(await this.userRepository.create({created_at:new Date(a),updated_at:new Date(R),email_addresses:h,...y}),t.status(201).json({message:"Usu\xE1rio criado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var v=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:a}=r;s==="user.deleted"&&(await this.userRepository.delete(a),t.status(200).json({message:"Usu\xE1rio deletado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var I=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:{email_addresses:a,...i}}=r;s==="user.updated"&&(await this.userRepository.update({...i,email_addresses:a}),t.status(200).json({message:"Usu\xE1rio atualizado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var k=class{constructor(e){this.userRepository=e}async handle(e,t){try{let r=await this.userRepository.findAll();return t.status(200).json(r)}catch{return t.status(500).json({message:"Erro ao buscar usu\xE1rios"})}}};var C=class{constructor(e){this.prisma=e}async create({email_addresses:e,first_name:t,last_name:r,...s}){await this.prisma.user.create({data:{first_name:t,last_name:r,id:s.id,created_at:s.created_at,updated_at:s.updated_at,image_url:s.image_url,profile_image_url:s.profile_image_url,email_addresses:{create:e.map(a=>({email_address:a.email_address,linked_to:JSON.stringify(a.linked_to),id:a.id}))}}})}async update(e){await this.prisma.user.update({where:{id:e.id},data:{first_name:e.first_name,last_name:e.last_name,image_url:e.image_url,profile_image_url:e.profile_image_url,email_addresses:{update:e.email_addresses.map(t=>({where:{id:t.id},data:{email_address:t.email_address,linked_to:JSON.stringify(t.linked_to)}}))}}})}async delete(e){await this.prisma.user.delete({where:{id:e.id}})}async findAll(){return await this.prisma.user.findMany({include:{email_addresses:!0}})}};import{PrismaClient as _e}from"@prisma/client";var n=new _e;function b(){return new C(n)}import{Webhook as Ue}from"svix";var E=class{constructor(e){this.webhook=e}async verifyEvent(e){let{"svix-id":t,"svix-timestamp":r,"svix-signature":s}=e.headers;if(!t||!r||!s)throw new Error("Headers are missing");let a=JSON.stringify(e.body),i={"svix-id":t,"svix-timestamp":r,"svix-signature":s};try{return this.webhook.verify(a,i)}catch(m){if(m instanceof Error)throw new Error(m.message)}}};function _(o){return new E(new Ue(o))}import{config as xe}from"dotenv";xe();function ee(){return{createUserController:new T(_(process.env.CLERK_USER_CREATED),b())}}function te(){return{updateUserController:new I(_(process.env.CLERK_USER_UPDATED),b())}}function re(){return{deleteUserController:new v(_(process.env.CLERK_USER_DELETED),b())}}function oe(){return{findAllUsersController:new k(b())}}var{createUserController:qe}=ee(),{updateUserController:Me}=te(),{deleteUserController:Ne}=re(),w=Se();w.post("/api/webhook/created-user",async(o,e)=>{await qe.handle(o,e)});w.post("/api/webhook/updated-user",async(o,e)=>{await Me.handle(o,e)});w.post("/api/webhook/deleted-user",async(o,e)=>{await Ne.handle(o,e)});w.get("/",async(o,e)=>{let{findAllUsersController:t}=oe();await t.handle(o,e)});import{Router as Be}from"express";var U={NEWS:"news"};var x=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{title:r,content:s,author_id:a}=e.body,i=await this.firebaseStorageService.uploadFile(e,U.NEWS),m=await this.newsRepository.create({title:r,content:s,author_id:a,image_url:i});t.status(201).json(m)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var S=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{id:r}=e.params,{title:s,content:a,image_url:i}=e.body,m;i&&(m=await this.firebaseStorageService.updateFile(e,U.NEWS));let R=await this.newsRepository.update({id:r,title:s,content:a,image_url:m});t.status(200).json(R)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var q=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{id:r}=e.params;await Promise.all([this.newsRepository.delete(r),this.firebaseStorageService.deleteFile(e)]),t.status(200).json({message:"Not\xEDcia deletada com sucesso."})}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var M=class{constructor(e){this.prisma=e}async create({title:e,content:t,author_id:r,image_url:s}){return await this.prisma.news.create({data:{title:e,content:t,author_id:r,image_url:s},include:{author:!0}})}async findAll(){return await this.prisma.news.findMany({include:{author:!0},orderBy:{created_at:"desc"}})}async findById(e){return await this.prisma.news.findUnique({where:{id:e},include:{author:!0}})}async findByAuthorId(e){return await this.prisma.news.findMany({where:{author_id:e},orderBy:{created_at:"desc"}})}async update(e){return await this.prisma.news.update({where:{id:e.id},data:{title:e.title,content:e.content,...e.image_url&&{image_url:e.image_url}}})}async delete(e){await this.prisma.news.delete({where:{id:e}})}};function f(){return new M(n)}var N=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let r=await this.newsRepository.findAll();t.status(200).json(r)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var A=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{id:r}=e.params,s=await this.newsRepository.findById(r);t.status(200).json(s)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var j=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{author_id:r}=e.params,s=await this.newsRepository.findByAuthorId(r);t.status(200).json(s)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};import{randomUUID as Ae}from"node:crypto";var F=class{constructor(e){this.bucket=e}async uploadFile(e,t){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");let r=e.file,s=e.body.author_id,a=`${Ae()}-${r?.originalname}`,i=this.bucket.file(`images/${t}/${s}/${a}`),m=i.createWriteStream({metadata:{contentType:r?.mimetype}});return m.on("error",h=>{console.log(h)}),m.on("finish",async()=>{await i.makePublic()}),m.end(r?.buffer),`https://storage.googleapis.com/${this.bucket.name}/${i.name}`}async updateFile(e,t){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");try{let r=this.getPath(e.body.image_url);if(!r)throw new Error("Arquivo n\xE3o encontrado.");let[s,a]=await Promise.all([this.bucket.file(r).delete(),this.uploadFile(e,t)]);return a}catch{throw new Error("Erro ao atualizar o arquivo.")}}async deleteFile(e){if(!e.body.image_url)throw new Error("Arquivo n\xE3o encontrado.");let t=this.getPath(e.body.image_url);if(!t)throw new Error("Arquivo n\xE3o encontrado.");try{await this.bucket.file(t).delete()}catch{throw new Error("Erro ao deletar o arquivo.")}}getPath(e){let t=e.match(/\/images\/.+$/);return t?t[0].slice(1):null}};import se from"firebase-admin";import{config as je}from"dotenv";je();var V=se.initializeApp({credential:se.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY,projectId:process.env.FIREBASE_PROJECT_ID,type:process.env.FIREBASE_TYPE,privateKeyId:process.env.FIREBASE_PRIVATE_KEY_ID,clientId:process.env.FIREBASE_CLIENT_ID,authUri:process.env.FIREBASE_AUTH_URI,tokenUri:process.env.FIREBASE_TOKEN_URI,authProviderX509CertUrl:process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,clientX509CertUrl:process.env.FIREBASE_CLIENT_X509_CERT_URL}),storageBucket:process.env.FIREBASE_BUCKET});V.name?console.log("\u{1F525} Firebase conectado com sucesso!"):console.error("\u274C Erro ao se conectar ao Firebase.");import{getStorage as Fe}from"firebase-admin/storage";var Pe=Fe(V),ae=Pe.bucket(process.env.FIREBASE_BUCKET);function P(){return new F(ae)}function ie(){return{createNewsController:new x(f(),P())}}function ne(){return{findAllNewsController:new N(f())}}function me(){return{findNewsByIdController:new A(f())}}function pe(){return{findNewsByAuthorIdController:new j(f())}}function le(){return{updateNewsController:new S(f(),P())}}function ce(){return{deleteNewsController:new q(f(),P())}}import de from"multer";var Y=de({storage:de.memoryStorage()});var d=Be();d.post("/",Y.single("image"),async(o,e)=>{let{createNewsController:t}=ie();await t.handle(o,e)});d.get("/",async(o,e)=>{let{findAllNewsController:t}=ne();await t.handle(o,e)});d.get("/:id",async(o,e)=>{let{findNewsByIdController:t}=me();await t.handle(o,e)});d.get("/author/:author_id",async(o,e)=>{let{findNewsByAuthorIdController:t}=pe();await t.handle(o,e)});d.put("/:id",Y.single("image"),async(o,e)=>{let{updateNewsController:t}=le();await t.handle(o,e)});d.delete("/:id",async(o,e)=>{let{deleteNewsController:t}=ce();await t.handle(o,e)});import{Router as De}from"express";var B=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{team_id:r}=e.params,{member:s}=e.body,a=await this.teamMemberRepository.create({team_id:r,...s});t.status(201).json(a)}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var D=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.teamMemberRepository.delete([r]),t.status(200).json({message:"Membro removido com sucesso"})}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var O=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{member:r}=e.body,s=await this.teamMemberRepository.update({member:r});t.status(200).json(s)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var u=class{constructor(e){this.prisma=e}async findMembersByTeamId(e){return this.prisma.teamMember.findMany({where:{team_id:e}})}async create(e){return this.prisma.teamMember.create({data:e})}async update({member:{id:e,...t}}){return this.prisma.teamMember.update({where:{id:e},data:t})}async updateMany(e){let{id:t}=e;await Promise.all(e.members.map(({id:r,role:s,...a})=>r?this.prisma.teamMember.upsert({where:{id:r},update:{role:s},create:{...a,team_id:t,role:s}}):this.prisma.teamMember.create({data:{...a,team_id:t,role:s}})))}async delete(e){await this.prisma.teamMember.deleteMany({where:{id:{in:e}}})}};function ue(){return{createTeamMemberController:new B(new u(n))}}function ye(){return{updateTeamMemberController:new O(new u(n))}}function fe(){return{deleteTeamMemberController:new D(new u(n))}}var W=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{name:r,type:s,members:a}=e.body,i=await this.teamRepository.create({name:r,type:s,members:a});t.status(201).json(i)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var L=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.teamRepository.delete(r),t.status(200).json({message:"Equipe deletada com sucesso"})}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var K=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let r=await this.teamRepository.findAll();return t.status(200).json(r)}catch(r){if(r instanceof Error)return t.status(500).json({message:r.message})}}};var $=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{id:r}=e.params,s=await this.teamRepository.findById(r);t.status(200).json(s)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var J=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{type:r}=e.params,s=await this.teamRepository.findByType(r);t.status(200).json(s)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var X=class{constructor(e,t){this.teamRepository=e;this.teamMemberRepository=t}async handle(e,t){try{let{id:r}=e.params,{name:s,members:a}=e.body,i=await this.teamMemberRepository.findMembersByTeamId(r),m=a.map(y=>y.id),R=i.filter(y=>!m.includes(y.id)).map(y=>y.id);await this.teamMemberRepository.delete(R),await this.teamMemberRepository.updateMany({id:r,name:s,members:a});let h=await this.teamRepository.update({id:r,name:s});t.status(200).json(h)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var c=class{constructor(e){this.prisma=e}async create(e){return await this.prisma.team.create({data:{name:e.name,type:e.type,team_members:{create:e.members.map(t=>({role:t.role,description:t.description,user_id:t.user_id}))}}})}async findAll(){return await this.prisma.team.findMany({include:{team_members:{include:{user:!0}}}})}async findById(e){return await this.prisma.team.findUnique({where:{id:e},include:{team_members:{include:{user:!0}}}})}async findByType(e){return await this.prisma.team.findMany({where:{type:e},include:{team_members:{include:{user:!0}}}})}async update(e){return await this.prisma.team.update({where:{id:e.id},data:{name:e.name}})}async delete(e){await this.prisma.team.delete({where:{id:e}})}};function Re(){return{findAllTeamsController:new K(new c(n))}}function we(){return{findTeamByIdController:new $(new c(n))}}function he(){return{findTeamByTypeController:new J(new c(n))}}function be(){return{createTeamController:new W(new c(n))}}function ge(){return{updateTeamController:new X(new c(n),new u(n))}}function Te(){return{deleteTeamController:new L(new c(n))}}var p=De();p.get("/",async(o,e)=>{let{findAllTeamsController:t}=Re();await t.handle(o,e)});p.get("/id/:id",async(o,e)=>{let{findTeamByIdController:t}=we();await t.handle(o,e)});p.get("/type/:type",async(o,e)=>{let{findTeamByTypeController:t}=he();await t.handle(o,e)});p.post("/",async(o,e)=>{let{createTeamController:t}=be();await t.handle(o,e)});p.put("/member/:id",async(o,e)=>{let{updateTeamMemberController:t}=ye();await t.handle(o,e)});p.post("/member/:team_id",async(o,e)=>{let{createTeamMemberController:t}=ue();await t.handle(o,e)});p.put("/:id",async(o,e)=>{let{updateTeamController:t}=ge();await t.handle(o,e)});p.delete("/:id",async(o,e)=>{let{deleteTeamController:t}=Te();await t.handle(o,e)});p.delete("/member/:id",async(o,e)=>{let{deleteTeamMemberController:t}=fe();await t.handle(o,e)});var l=G(),We={methods:["GET","POST","PUT","DELETE"],origin:["http://localhost:3000","https://rede-ct.vercel.app"],credentials:!0};l.use(Oe(We));l.use(G.json());l.use(G.urlencoded({extended:!1}));l.use("/",z);l.use("/auth",H);l.use("/user",w);l.use("/news",d);l.use("/team",p);var Ke=Le.createServer(l),ve=4e3;Ke.listen(ve,()=>{console.log(`\u{1F680} Aplica\xE7\xE3o rodando na porta ${ve}.`)});
//# sourceMappingURL=server.js.map