import Ge from"node:http";import Xe from"cors";import re from"express";import{Router as Ue}from"express";var I=class{handle(e,t){let r=e.auth;if(!r?.userId){t.status(401).json({message:"N\xE3o autenticado"});return}t.status(200).json({message:"Usu\xE1rio autenticado com Clerk",userId:r.userId})}};function te(){return{clerkAuthController:new I}}import{ClerkExpressWithAuth as _e}from"@clerk/clerk-sdk-node";var Se=_e(),oe=(o,e,t)=>Se(o,e,t);var G=Ue();G.get("/",oe,async(o,e)=>{let{clerkAuthController:t}=te();await t.handle(o,e)});import{Router as xe}from"express";var V=xe();V.get("/",(o,e)=>{e.status(200).json({message:"Rede CT"})});import{Router as Pe}from"express";var v={NEWS:"news"};var k=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{title:r,content:s,author_id:a}=e.body,i=await this.firebaseStorageService.uploadFile(e,v.NEWS),m=await this.newsRepository.create({title:r,content:s,author_id:a,image_url:i});t.status(201).json(m)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var C=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{id:r}=e.params;await Promise.all([this.newsRepository.delete(r),this.firebaseStorageService.deleteFile(e)]),t.status(200).json({message:"Not\xEDcia deletada com sucesso."})}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};import w from"zod";var Ae=w.object({title:w.string().optional(),content:w.string().optional(),author_id:w.string().optional(),order_by:w.union([w.enum(["asc","desc"]),w.literal("")]).optional().transform(o=>o===""?void 0:o)}),_=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{author_id:r,content:s,order_by:a="desc",title:i}=Ae.parse({title:e.query.title,content:e.query.content,author_id:e.query.author_id,order_by:e.query.order_by}),m=await this.newsRepository.findAll({author_id:r,content:s,title:i,order_by:a});t.status(200).json(m)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};import h from"zod";var De=h.object({author_id:h.string(),title:h.string().optional(),content:h.string().optional(),order_by:h.union([h.enum(["asc","desc"]),h.literal("")]).optional().transform(o=>o===""?void 0:o)}),S=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{author_id:r,content:s,order_by:a,title:i}=De.parse({author_id:e.params.author_id,title:e.query.title,content:e.query.content,order_by:e.query.order_by}),m=await this.newsRepository.findByAuthorId({author_id:r,filter:{order_by:a,title:i,content:s}});t.status(200).json(m)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var U=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{id:r}=e.params,s=await this.newsRepository.findById(r);t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var x=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{id:r}=e.params,{title:s,content:a,image_url:i}=e.body,m;i&&(m=await this.firebaseStorageService.updateFile(e,v.NEWS));let y=await this.newsRepository.update({id:r,title:s,content:a,image_url:m});t.status(200).json(y)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};import{PrismaClient as Me}from"@prisma/client";var p=new Me({log:["query"]});var A=class{constructor(e){this.prisma=e}async create({title:e,content:t,author_id:r,image_url:s}){return await this.prisma.news.create({data:{title:e,content:t,author_id:r,image_url:s},include:{author:!0}})}async findAll({author_id:e,content:t,title:r,order_by:s="desc"}){let a={};e&&(a.author_id={contains:e,mode:"insensitive"});let i=[];return r&&i.push({title:{contains:r,mode:"insensitive"}}),t&&i.push({content:{contains:t,mode:"insensitive"}}),i.length>0&&(a.OR=i),await this.prisma.news.findMany({include:{author:!0},where:a,orderBy:{updated_at:s}})}async findById(e){return await this.prisma.news.findUnique({where:{id:e},include:{author:!0}})}async findByAuthorId({author_id:e,filter:{order_by:t="desc",content:r,title:s}}){let a={author_id:e},i=[];return s&&i.push({title:{contains:s,mode:"insensitive"}}),r&&i.push({content:{contains:r,mode:"insensitive"}}),i.length>0&&(a.OR=i),await this.prisma.news.findMany({where:a,orderBy:{updated_at:t}})}async update(e){return await this.prisma.news.update({where:{id:e.id},data:{title:e.title,content:e.content,...e.image_url&&{image_url:e.image_url}}})}async delete(e){await this.prisma.news.delete({where:{id:e}})}};function T(){return new A(p)}import{getStorage as Ne}from"firebase-admin/storage";import{config as qe}from"dotenv";import se from"firebase-admin";qe();var Y=se.initializeApp({credential:se.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY,projectId:process.env.FIREBASE_PROJECT_ID,type:process.env.FIREBASE_TYPE,privateKeyId:process.env.FIREBASE_PRIVATE_KEY_ID,clientId:process.env.FIREBASE_CLIENT_ID,authUri:process.env.FIREBASE_AUTH_URI,tokenUri:process.env.FIREBASE_TOKEN_URI,authProviderX509CertUrl:process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,clientX509CertUrl:process.env.FIREBASE_CLIENT_X509_CERT_URL}),storageBucket:process.env.FIREBASE_BUCKET});Y.name?console.log("\u{1F525} Firebase conectado com sucesso!"):console.error("\u274C Erro ao se conectar ao Firebase.");var Be=Ne(Y),ae=Be.bucket(process.env.FIREBASE_BUCKET);import{randomUUID as Fe}from"node:crypto";var Oe=/\/images\/.+$/,D=class{constructor(e){this.bucket=e}async uploadFile(e,t){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");let r=e.file,s=e.body.author_id,a=`${Fe()}-${r?.originalname}`,i=this.bucket.file(`images/${t}/${s}/${a}`);return await new Promise((m,y)=>{let g=i.createWriteStream({metadata:{contentType:r?.mimetype}});g.on("error",l=>{console.log(l),y(l)}),g.on("finish",async()=>{try{await i.makePublic();let l=`https://storage.googleapis.com/${this.bucket.name}/${i.name}`;m(l)}catch(l){console.error(l),y(l)}}),g.end(r?.buffer)})}async updateFile(e,t){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");if(e.file.size!==0)try{let r=this.getPath(e.body.image_url);if(!r)throw new Error("Arquivo n\xE3o encontrado.");let[s,a]=await Promise.all([this.bucket.file(r).delete(),this.uploadFile(e,t)]);return a}catch(r){throw console.error(r),new Error("Erro ao atualizar o arquivo.")}}async deleteFile(e){if(!e.body.image_url)throw new Error("Arquivo n\xE3o encontrado.");let t=this.getPath(e.body.image_url);if(!t)throw new Error("Arquivo n\xE3o encontrado.");try{await this.bucket.file(t).delete()}catch(r){throw console.error(r),new Error("Erro ao deletar o arquivo.")}}getPath(e){let t=e.match(Oe);return t?t[0].slice(1):null}};function M(){return new D(ae)}function ie(){return{createNewsController:new k(T(),M())}}function ne(){return{findAllNewsController:new _(T())}}function me(){return{findNewsByIdController:new U(T())}}function pe(){return{findNewsByAuthorIdController:new S(T())}}function le(){return{updateNewsController:new x(T(),M())}}function ce(){return{deleteNewsController:new C(T(),M())}}import de from"multer";var Z=de({storage:de.memoryStorage()});var f=Pe();f.post("/",Z.single("image"),async(o,e)=>{let{createNewsController:t}=ie();await t.handle(o,e)});f.get("/",async(o,e)=>{let{findAllNewsController:t}=ne();await t.handle(o,e)});f.get("/:id",async(o,e)=>{let{findNewsByIdController:t}=me();await t.handle(o,e)});f.get("/author/:author_id",async(o,e)=>{let{findNewsByAuthorIdController:t}=pe();await t.handle(o,e)});f.put("/:id",Z.single("image"),async(o,e)=>{let{updateNewsController:t}=le();await t.handle(o,e)});f.delete("/:id",async(o,e)=>{let{deleteNewsController:t}=ce();await t.handle(o,e)});import{Router as We}from"express";var q=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{team_id:r}=e.params,{member:s}=e.body,a=await this.teamMemberRepository.create({team_id:r,...s});t.status(201).json(a)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var N=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.teamMemberRepository.delete(r),t.status(200).json({message:"Membro removido com sucesso"})}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var B=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{member:r}=e.body,s=await this.teamMemberRepository.update({member:r});t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var R=class{constructor(e){this.prisma=e}async findByTeamId(e){return await this.prisma.teamMember.findMany({where:{team_id:e}})}async create(e){return await this.prisma.teamMember.create({data:e})}async update({member:{id:e,...t}}){return await this.prisma.teamMember.update({where:{id:e},data:t})}async updateMany({id:e,members:t}){await Promise.all(t.map(async r=>{let s=await this.prisma.teamMember.findFirst({where:{team_id:e,user_id:r.user.id},include:{user:!0}});s?await this.prisma.teamMember.update({where:{id:s.id},data:{role:r.role}}):await this.prisma.teamMember.create({data:{team_id:e,user_id:r.user.id,role:r.role}})}))}async delete(e){await this.prisma.teamMember.deleteMany({where:{id:e}})}async deleteMany(e){await Promise.all(e.map(async t=>{await this.prisma.teamMember.delete({where:{id:t}})}))}};function ue(){return{createTeamMemberController:new q(new R(p))}}function ye(){return{updateTeamMemberController:new B(new R(p))}}function fe(){return{deleteTeamMemberController:new N(new R(p))}}var F=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{name:r,type:s,members:a}=e.body,i=await this.teamRepository.create({name:r,type:s,members:a});t.status(201).json(i)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var O=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.teamRepository.delete(r),t.status(200).json({message:"Equipe deletada com sucesso"})}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var P=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let r=await this.teamRepository.findAll();return t.status(200).json(r)}catch(r){if(console.error(r),r instanceof Error)return t.status(400).json({message:r.message})}}};var j=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{id:r}=e.params,s=await this.teamRepository.findById(r);t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};import ee from"zod";var je=ee.object({type:ee.string(),name:ee.string().optional()}),W=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{type:r,name:s}=je.parse({type:e.params.type,name:e.query.name}),a=await this.teamRepository.findByType({type:r,filter:{name:s}});t.status(200).json(a)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var K=class{constructor(e,t){this.teamRepository=e;this.teamMemberRepository=t}async handle(e,t){try{let{id:r}=e.params,{name:s,members:a}=e.body,i=await this.teamMemberRepository.findByTeamId(r),m=a.map(l=>l.id),y=i.filter(l=>!m.includes(l.id)).map(l=>l.id);await this.teamMemberRepository.deleteMany(y),await this.teamMemberRepository.updateMany({id:r,members:a});let g=await this.teamRepository.update({id:r,name:s});t.status(200).json(g)}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var u=class{constructor(e){this.prisma=e}async create({members:e,name:t,type:r}){return await this.prisma.team.create({data:{name:t,type:r,team_members:{create:e.map(s=>({role:s.role,user:{connect:{id:s.user.id}}}))}}})}async findAll(){return await this.prisma.team.findMany({include:{team_members:{include:{user:!0}}}})}async findById(e){return await this.prisma.team.findUnique({where:{id:e},include:{team_members:{include:{user:!0}}}})}async findByType({type:e,filter:{name:t}}){let r={type:e};return t&&(r.name={contains:t,mode:"insensitive"}),await this.prisma.team.findMany({where:r,include:{team_members:{include:{user:!0}}}})}async update({id:e,name:t}){return await this.prisma.team.update({where:{id:e},data:{name:t}})}async delete(e){await this.prisma.team.delete({where:{id:e}})}};function Re(){return{findAllTeamsController:new P(new u(p))}}function we(){return{findTeamByIdController:new j(new u(p))}}function he(){return{findTeamByTypeController:new W(new u(p))}}function Te(){return{createTeamController:new F(new u(p))}}function be(){return{updateTeamController:new K(new u(p),new R(p))}}function ge(){return{deleteTeamController:new O(new u(p))}}var c=We();c.get("/",async(o,e)=>{let{findAllTeamsController:t}=Re();await t.handle(o,e)});c.get("/id/:id",async(o,e)=>{let{findTeamByIdController:t}=we();await t.handle(o,e)});c.get("/type/:type",async(o,e)=>{let{findTeamByTypeController:t}=he();await t.handle(o,e)});c.post("/",async(o,e)=>{let{createTeamController:t}=Te();await t.handle(o,e)});c.put("/member/:id",async(o,e)=>{let{updateTeamMemberController:t}=ye();await t.handle(o,e)});c.post("/:team_id/member",async(o,e)=>{let{createTeamMemberController:t}=ue();await t.handle(o,e)});c.put("/:id",async(o,e)=>{let{updateTeamController:t}=be();await t.handle(o,e)});c.delete("/member/:id",async(o,e)=>{let{deleteTeamMemberController:t}=fe();await t.handle(o,e)});c.delete("/:id",async(o,e)=>{let{deleteTeamController:t}=ge();await t.handle(o,e)});import{Router as He}from"express";import{config as Qe}from"dotenv";var Q=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:{created_at:a,updated_at:i,email_addresses:m,...y}}=r;s==="user.created"&&(await this.userRepository.create({created_at:new Date(a),updated_at:new Date(i),email_addresses:m,...y}),t.status(201).json({message:"Usu\xE1rio criado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var H=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:a}=r;s==="user.deleted"&&(await this.userRepository.delete(a),t.status(200).json({message:"Usu\xE1rio deletado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var L=class{constructor(e){this.userRepository=e}async handle(e,t){try{let r=await this.userRepository.findAll();t.status(200).json(r)}catch(r){console.log(r),r instanceof Error&&t.status(400).json({message:"Erro ao buscar usu\xE1rios"})}}};var $=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:{email_addresses:a,...i}}=r;s==="user.updated"&&(await this.userRepository.update({...i,email_addresses:a}),t.status(200).json({message:"Usu\xE1rio atualizado com sucesso."}))}catch(r){console.log(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var z=class{constructor(e){this.prisma=e}async create({email_addresses:e,first_name:t,last_name:r,...s}){await this.prisma.user.create({data:{first_name:t,last_name:r,id:s.id,created_at:s.created_at,updated_at:s.updated_at,image_url:s.image_url,profile_image_url:s.profile_image_url,email_addresses:{create:e.map(a=>({email_address:a.email_address,linked_to:JSON.stringify(a.linked_to),id:a.id}))}}})}async update(e){await this.prisma.user.update({where:{id:e.id},data:{first_name:e.first_name,last_name:e.last_name,image_url:e.image_url,profile_image_url:e.profile_image_url,email_addresses:{update:e.email_addresses.map(t=>({where:{id:t.id},data:{email_address:t.email_address,linked_to:JSON.stringify(t.linked_to)}}))}}})}async delete(e){await this.prisma.user.delete({where:{id:e.id}})}async findAll(){return await this.prisma.user.findMany({include:{email_addresses:!0}})}};function E(){return new z(p)}import{Webhook as Ke}from"svix";var X=class{constructor(e){this.webhook=e}async verifyEvent(e){let{"svix-id":t,"svix-timestamp":r,"svix-signature":s}=e.headers;if(!(t&&r&&s))throw new Error("Headers are missing");let a=JSON.stringify(e.body),i={"svix-id":t,"svix-timestamp":r,"svix-signature":s};try{return await this.webhook.verify(a,i)}catch(m){if(m instanceof Error)throw new Error(m.message)}}};function J(o){return new X(new Ke(o))}Qe();function Ee(){return{createUserController:new Q(J(process.env.CLERK_USER_CREATED),E())}}function Ie(){return{updateUserController:new $(J(process.env.CLERK_USER_UPDATED),E())}}function ve(){return{deleteUserController:new H(J(process.env.CLERK_USER_DELETED),E())}}function ke(){return{findAllUsersController:new L(E())}}var{createUserController:Le}=Ee(),{updateUserController:$e}=Ie(),{deleteUserController:ze}=ve(),b=He();b.post("/api/webhook/created-user",async(o,e)=>{await Le.handle(o,e)});b.post("/api/webhook/updated-user",async(o,e)=>{await $e.handle(o,e)});b.post("/api/webhook/deleted-user",async(o,e)=>{await ze.handle(o,e)});b.get("/",async(o,e)=>{let{findAllUsersController:t}=ke();await t.handle(o,e)});var d=re(),Je={methods:["GET","POST","PUT","DELETE"],origin:["http://localhost:3000","https://rede-ct.vercel.app"],credentials:!0};d.use(Xe(Je));d.use(re.json());d.use(re.urlencoded({extended:!1}));d.use("/",V);d.use("/auth",G);d.use("/user",b);d.use("/news",f);d.use("/team",c);var Ve=Ge.createServer(d),Ce=4e3;Ve.listen(Ce,()=>{console.log(`\u{1F680} Aplica\xE7\xE3o rodando na porta ${Ce}.`)});
