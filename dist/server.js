import He from"node:http";import Ke from"cors";import Y from"express";import{Router as Ce}from"express";var b=class{handle(e,r){let t=e.auth;if(!t?.userId){r.status(401).json({message:"N\xE3o autenticado"});return}r.status(200).json({message:"Usu\xE1rio autenticado com Clerk",userId:t.userId})}};function Z(){return{clerkAuthController:new b}}import{ClerkExpressWithAuth as ve}from"@clerk/clerk-sdk-node";var ke=ve(),ee=(o,e,r)=>ke(o,e,r);var z=Ce();z.get("/",ee,async(o,e)=>{let{clerkAuthController:r}=Z();await r.handle(o,e)});import{Router as _e}from"express";var J=_e();J.get("/",(o,e)=>{e.status(200).json({message:"Rede CT"})});import{Router as Me}from"express";var E={NEWS:"news"};var I=class{constructor(e,r){this.newsRepository=e;this.firebaseStorageService=r}async handle(e,r){try{let{title:t,content:s,author_id:a}=e.body,i=await this.firebaseStorageService.uploadFile(e,E.NEWS),m=await this.newsRepository.create({title:t,content:s,author_id:a,image_url:i});r.status(201).json(m)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var v=class{constructor(e,r){this.newsRepository=e;this.firebaseStorageService=r}async handle(e,r){try{let{id:t}=e.params;await Promise.all([this.newsRepository.delete(t),this.firebaseStorageService.deleteFile(e)]),r.status(200).json({message:"Not\xEDcia deletada com sucesso."})}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var k=class{constructor(e){this.newsRepository=e}async handle(e,r){try{let t=typeof e.query.title=="string"?e.query.title:void 0,s=typeof e.query.content=="string"?e.query.content:void 0,a=typeof e.query.author_id=="string"?e.query.author_id:void 0,i=e.query.order_by==="asc"||e.query.order_by==="desc"?e.query.order_by:void 0,m=await this.newsRepository.findAll({author_id:a,content:s,title:t,order_by:i});r.status(200).json(m)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var C=class{constructor(e){this.newsRepository=e}async handle(e,r){try{let{author_id:t}=e.params,s=typeof e.query.order_by=="string"?e.query.order_by:void 0,a=typeof e.query.title=="string"?e.query.title:void 0,i=typeof e.query.content=="string"?e.query.content:void 0,m=await this.newsRepository.findByAuthorId({author_id:t,filter:{order_by:s,title:a,content:i}});r.status(200).json(m)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var _=class{constructor(e){this.newsRepository=e}async handle(e,r){try{let{id:t}=e.params,s=await this.newsRepository.findById(t);r.status(200).json(s)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var S=class{constructor(e,r){this.newsRepository=e;this.firebaseStorageService=r}async handle(e,r){try{let{id:t}=e.params,{title:s,content:a,image_url:i}=e.body,m;i&&(m=await this.firebaseStorageService.updateFile(e,E.NEWS));let d=await this.newsRepository.update({id:t,title:s,content:a,image_url:m});r.status(200).json(d)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};import{PrismaClient as Se}from"@prisma/client";var p=new Se({log:["query"]});var U=class{constructor(e){this.prisma=e}async create({title:e,content:r,author_id:t,image_url:s}){return await this.prisma.news.create({data:{title:e,content:r,author_id:t,image_url:s},include:{author:!0}})}async findAll({author_id:e,content:r,title:t,order_by:s}){let a={};e&&(a.author_id={contains:e,mode:"insensitive"});let i=[];return t&&i.push({title:{contains:t,mode:"insensitive"}}),r&&i.push({content:{contains:r,mode:"insensitive"}}),i.length>0&&(a.OR=i),console.log(a),await this.prisma.news.findMany({include:{author:!0},where:a,orderBy:{updated_at:s||"desc"}})}async findById(e){return await this.prisma.news.findUnique({where:{id:e},include:{author:!0}})}async findByAuthorId({author_id:e,filter:{order_by:r="updated_at",content:t,title:s}}){let a={author_id:e},i=[];s&&i.push({title:{contains:s,mode:"insensitive"}}),t&&i.push({content:{contains:t,mode:"insensitive"}}),i.length>0&&(a.OR=i);let d={created_at:"created_at",updated_at:"updated_at",title:"title",content:"content"}[r]||"updated_at";return await this.prisma.news.findMany({where:a,orderBy:{[d]:"desc"}})}async update(e){return await this.prisma.news.update({where:{id:e.id},data:{title:e.title,content:e.content,...e.image_url&&{image_url:e.image_url}}})}async delete(e){await this.prisma.news.delete({where:{id:e}})}};function w(){return new U(p)}import{getStorage as xe}from"firebase-admin/storage";import{config as Ue}from"dotenv";import te from"firebase-admin";Ue();var G=te.initializeApp({credential:te.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY,projectId:process.env.FIREBASE_PROJECT_ID,type:process.env.FIREBASE_TYPE,privateKeyId:process.env.FIREBASE_PRIVATE_KEY_ID,clientId:process.env.FIREBASE_CLIENT_ID,authUri:process.env.FIREBASE_AUTH_URI,tokenUri:process.env.FIREBASE_TOKEN_URI,authProviderX509CertUrl:process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,clientX509CertUrl:process.env.FIREBASE_CLIENT_X509_CERT_URL}),storageBucket:process.env.FIREBASE_BUCKET});G.name?console.log("\u{1F525} Firebase conectado com sucesso!"):console.error("\u274C Erro ao se conectar ao Firebase.");var Ae=xe(G),re=Ae.bucket(process.env.FIREBASE_BUCKET);import{randomUUID as De}from"node:crypto";var qe=/\/images\/.+$/,x=class{constructor(e){this.bucket=e}async uploadFile(e,r){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");let t=e.file,s=e.body.author_id,a=`${De()}-${t?.originalname}`,i=this.bucket.file(`images/${r}/${s}/${a}`);return await new Promise((m,d)=>{let T=i.createWriteStream({metadata:{contentType:t?.mimetype}});T.on("error",l=>{console.log(l),d(l)}),T.on("finish",async()=>{try{await i.makePublic();let l=`https://storage.googleapis.com/${this.bucket.name}/${i.name}`;m(l)}catch(l){console.error(l),d(l)}}),T.end(t?.buffer)})}async updateFile(e,r){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");if(e.file.size!==0)try{let t=this.getPath(e.body.image_url);if(!t)throw new Error("Arquivo n\xE3o encontrado.");let[s,a]=await Promise.all([this.bucket.file(t).delete(),this.uploadFile(e,r)]);return a}catch(t){throw console.error(t),new Error("Erro ao atualizar o arquivo.")}}async deleteFile(e){if(!e.body.image_url)throw new Error("Arquivo n\xE3o encontrado.");let r=this.getPath(e.body.image_url);if(!r)throw new Error("Arquivo n\xE3o encontrado.");try{await this.bucket.file(r).delete()}catch(t){throw console.error(t),new Error("Erro ao deletar o arquivo.")}}getPath(e){let r=e.match(qe);return r?r[0].slice(1):null}};function A(){return new x(re)}function oe(){return{createNewsController:new I(w(),A())}}function se(){return{findAllNewsController:new k(w())}}function ae(){return{findNewsByIdController:new _(w())}}function ie(){return{findNewsByAuthorIdController:new C(w())}}function ne(){return{updateNewsController:new S(w(),A())}}function me(){return{deleteNewsController:new v(w(),A())}}import pe from"multer";var V=pe({storage:pe.memoryStorage()});var f=Me();f.post("/",V.single("image"),async(o,e)=>{let{createNewsController:r}=oe();await r.handle(o,e)});f.get("/",async(o,e)=>{let{findAllNewsController:r}=se();await r.handle(o,e)});f.get("/:id",async(o,e)=>{let{findNewsByIdController:r}=ae();await r.handle(o,e)});f.get("/author/:author_id",async(o,e)=>{let{findNewsByAuthorIdController:r}=ie();await r.handle(o,e)});f.put("/:id",V.single("image"),async(o,e)=>{let{updateNewsController:r}=ne();await r.handle(o,e)});f.delete("/:id",async(o,e)=>{let{deleteNewsController:r}=me();await r.handle(o,e)});import{Router as Ne}from"express";var D=class{constructor(e){this.teamMemberRepository=e}async handle(e,r){try{let{team_id:t}=e.params,{member:s}=e.body,a=await this.teamMemberRepository.create({team_id:t,...s});r.status(201).json(a)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var q=class{constructor(e){this.teamMemberRepository=e}async handle(e,r){try{let{id:t}=e.params;await this.teamMemberRepository.delete(t),r.status(200).json({message:"Membro removido com sucesso"})}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var M=class{constructor(e){this.teamMemberRepository=e}async handle(e,r){try{let{member:t}=e.body,s=await this.teamMemberRepository.update({member:t});r.status(200).json(s)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var R=class{constructor(e){this.prisma=e}async findByTeamId(e){return await this.prisma.teamMember.findMany({where:{team_id:e}})}async create(e){return await this.prisma.teamMember.create({data:e})}async update({member:{id:e,...r}}){return await this.prisma.teamMember.update({where:{id:e},data:r})}async updateMany({id:e,members:r}){await Promise.all(r.map(async t=>{let s=await this.prisma.teamMember.findFirst({where:{team_id:e,user_id:t.user.id},include:{user:!0}});s?await this.prisma.teamMember.update({where:{id:s.id},data:{role:t.role}}):await this.prisma.teamMember.create({data:{team_id:e,user_id:t.user.id,role:t.role}})}))}async delete(e){await this.prisma.teamMember.deleteMany({where:{id:e}})}async deleteMany(e){await Promise.all(e.map(async r=>{await this.prisma.teamMember.delete({where:{id:r}})}))}};function le(){return{createTeamMemberController:new D(new R(p))}}function ce(){return{updateTeamMemberController:new M(new R(p))}}function de(){return{deleteTeamMemberController:new q(new R(p))}}var N=class{constructor(e){this.teamRepository=e}async handle(e,r){try{let{name:t,type:s,members:a}=e.body,i=await this.teamRepository.create({name:t,type:s,members:a});r.status(201).json(i)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var B=class{constructor(e){this.teamRepository=e}async handle(e,r){try{let{id:t}=e.params;await this.teamRepository.delete(t),r.status(200).json({message:"Equipe deletada com sucesso"})}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var O=class{constructor(e){this.teamRepository=e}async handle(e,r){try{let t=await this.teamRepository.findAll();return r.status(200).json(t)}catch(t){if(console.error(t),t instanceof Error)return r.status(400).json({message:t.message})}}};var F=class{constructor(e){this.teamRepository=e}async handle(e,r){try{let{id:t}=e.params,s=await this.teamRepository.findById(t);r.status(200).json(s)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var P=class{constructor(e){this.teamRepository=e}async handle(e,r){try{let{type:t}=e.params,s=typeof e.query.name=="string"?e.query.name:void 0,a=typeof e.query.updated_at=="string"?e.query.updated_at:void 0,i=await this.teamRepository.findByType({type:t,filter:{name:s,updated_at:a}});r.status(200).json(i)}catch(t){console.error(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var j=class{constructor(e,r){this.teamRepository=e;this.teamMemberRepository=r}async handle(e,r){try{let{id:t}=e.params,{name:s,members:a}=e.body,i=await this.teamMemberRepository.findByTeamId(t),m=a.map(l=>l.id),d=i.filter(l=>!m.includes(l.id)).map(l=>l.id);await this.teamMemberRepository.deleteMany(d),await this.teamMemberRepository.updateMany({id:t,members:a});let T=await this.teamRepository.update({id:t,name:s});r.status(200).json(T)}catch(t){t instanceof Error&&r.status(400).json({message:t.message})}}};var y=class{constructor(e){this.prisma=e}async create({members:e,name:r,type:t}){return await this.prisma.team.create({data:{name:r,type:t,team_members:{create:e.map(s=>({role:s.role,user:{connect:{id:s.user.id}}}))}}})}async findAll(){return await this.prisma.team.findMany({include:{team_members:{include:{user:!0}}}})}async findById(e){return await this.prisma.team.findUnique({where:{id:e},include:{team_members:{include:{user:!0}}}})}async findByType({type:e,filter:{name:r,updated_at:t}}){let s={type:e};return t&&(s.updated_at={equals:new Date(t)}),r&&(s.name={contains:r,mode:"insensitive"}),await this.prisma.team.findMany({where:s,include:{team_members:{include:{user:!0}}}})}async update({id:e,name:r}){return await this.prisma.team.update({where:{id:e},data:{name:r}})}async delete(e){await this.prisma.team.delete({where:{id:e}})}};function ue(){return{findAllTeamsController:new O(new y(p))}}function ye(){return{findTeamByIdController:new F(new y(p))}}function fe(){return{findTeamByTypeController:new P(new y(p))}}function Re(){return{createTeamController:new N(new y(p))}}function we(){return{updateTeamController:new j(new y(p),new R(p))}}function he(){return{deleteTeamController:new B(new y(p))}}var c=Ne();c.get("/",async(o,e)=>{let{findAllTeamsController:r}=ue();await r.handle(o,e)});c.get("/id/:id",async(o,e)=>{let{findTeamByIdController:r}=ye();await r.handle(o,e)});c.get("/type/:type",async(o,e)=>{let{findTeamByTypeController:r}=fe();await r.handle(o,e)});c.post("/",async(o,e)=>{let{createTeamController:r}=Re();await r.handle(o,e)});c.put("/member/:id",async(o,e)=>{let{updateTeamMemberController:r}=ce();await r.handle(o,e)});c.post("/:team_id/member",async(o,e)=>{let{createTeamMemberController:r}=le();await r.handle(o,e)});c.put("/:id",async(o,e)=>{let{updateTeamController:r}=we();await r.handle(o,e)});c.delete("/member/:id",async(o,e)=>{let{deleteTeamMemberController:r}=de();await r.handle(o,e)});c.delete("/:id",async(o,e)=>{let{deleteTeamController:r}=he();await r.handle(o,e)});import{Router as Fe}from"express";import{config as Oe}from"dotenv";var W=class{constructor(e,r){this.clerkWebhookService=e;this.userRepository=r}async handle(e,r){try{let t=await this.clerkWebhookService.verifyEvent(e);if(!t)throw new Error("Erro ao verificar webhook.");let{type:s,data:{created_at:a,updated_at:i,email_addresses:m,...d}}=t;s==="user.created"&&(await this.userRepository.create({created_at:new Date(a),updated_at:new Date(i),email_addresses:m,...d}),r.status(201).json({message:"Usu\xE1rio criado com sucesso."}))}catch(t){t instanceof Error&&r.status(400).json({message:t.message})}}};var K=class{constructor(e,r){this.clerkWebhookService=e;this.userRepository=r}async handle(e,r){try{let t=await this.clerkWebhookService.verifyEvent(e);if(!t)throw new Error("Erro ao verificar webhook.");let{type:s,data:a}=t;s==="user.deleted"&&(await this.userRepository.delete(a),r.status(200).json({message:"Usu\xE1rio deletado com sucesso."}))}catch(t){t instanceof Error&&r.status(400).json({message:t.message})}}};var Q=class{constructor(e){this.userRepository=e}async handle(e,r){try{let t=await this.userRepository.findAll();r.status(200).json(t)}catch(t){console.log(t),t instanceof Error&&r.status(400).json({message:"Erro ao buscar usu\xE1rios"})}}};var H=class{constructor(e,r){this.clerkWebhookService=e;this.userRepository=r}async handle(e,r){try{let t=await this.clerkWebhookService.verifyEvent(e);if(!t)throw new Error("Erro ao verificar webhook.");let{type:s,data:{email_addresses:a,...i}}=t;s==="user.updated"&&(await this.userRepository.update({...i,email_addresses:a}),r.status(200).json({message:"Usu\xE1rio atualizado com sucesso."}))}catch(t){console.log(t),t instanceof Error&&r.status(400).json({message:t.message})}}};var L=class{constructor(e){this.prisma=e}async create({email_addresses:e,first_name:r,last_name:t,...s}){await this.prisma.user.create({data:{first_name:r,last_name:t,id:s.id,created_at:s.created_at,updated_at:s.updated_at,image_url:s.image_url,profile_image_url:s.profile_image_url,email_addresses:{create:e.map(a=>({email_address:a.email_address,linked_to:JSON.stringify(a.linked_to),id:a.id}))}}})}async update(e){await this.prisma.user.update({where:{id:e.id},data:{first_name:e.first_name,last_name:e.last_name,image_url:e.image_url,profile_image_url:e.profile_image_url,email_addresses:{update:e.email_addresses.map(r=>({where:{id:r.id},data:{email_address:r.email_address,linked_to:JSON.stringify(r.linked_to)}}))}}})}async delete(e){await this.prisma.user.delete({where:{id:e.id}})}async findAll(){return await this.prisma.user.findMany({include:{email_addresses:!0}})}};function g(){return new L(p)}import{Webhook as Be}from"svix";var $=class{constructor(e){this.webhook=e}async verifyEvent(e){let{"svix-id":r,"svix-timestamp":t,"svix-signature":s}=e.headers;if(!(r&&t&&s))throw new Error("Headers are missing");let a=JSON.stringify(e.body),i={"svix-id":r,"svix-timestamp":t,"svix-signature":s};try{return await this.webhook.verify(a,i)}catch(m){if(m instanceof Error)throw new Error(m.message)}}};function X(o){return new $(new Be(o))}Oe();function Te(){return{createUserController:new W(X(process.env.CLERK_USER_CREATED),g())}}function ge(){return{updateUserController:new H(X(process.env.CLERK_USER_UPDATED),g())}}function be(){return{deleteUserController:new K(X(process.env.CLERK_USER_DELETED),g())}}function Ee(){return{findAllUsersController:new Q(g())}}var{createUserController:Pe}=Te(),{updateUserController:je}=ge(),{deleteUserController:We}=be(),h=Fe();h.post("/api/webhook/created-user",async(o,e)=>{await Pe.handle(o,e)});h.post("/api/webhook/updated-user",async(o,e)=>{await je.handle(o,e)});h.post("/api/webhook/deleted-user",async(o,e)=>{await We.handle(o,e)});h.get("/",async(o,e)=>{let{findAllUsersController:r}=Ee();await r.handle(o,e)});var u=Y(),Qe={methods:["GET","POST","PUT","DELETE"],origin:["http://localhost:3000","https://rede-ct.vercel.app"],credentials:!0};u.use(Ke(Qe));u.use(Y.json());u.use(Y.urlencoded({extended:!1}));u.use("/",J);u.use("/auth",z);u.use("/user",h);u.use("/news",f);u.use("/team",c);var Le=He.createServer(u),Ie=4e3;Le.listen(Ie,()=>{console.log(`\u{1F680} Aplica\xE7\xE3o rodando na porta ${Ie}.`)});
