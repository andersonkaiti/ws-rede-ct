import G from"node:http";import w from"express";import M from"cors";import{Router as q}from"express";var v=q();v.get("/",(o,e)=>{e.status(200).json({message:"Rede CT"})});import{Router as T}from"express";import{ClerkExpressWithAuth as W}from"@clerk/clerk-sdk-node";var A=W(),C=(o,e,r)=>A(o,e,r);var m=class{async handle(e,r){let t=e.auth;if(!t||!t.userId){r.status(401).json({message:"N\xE3o autenticado"});return}r.status(200).json({message:"Usu\xE1rio autenticado com Clerk",userId:t.userId})}};function U(){return{clerkAuthController:new m}}var{clerkAuthController:D}=U(),R=T();R.get("/",C,async(o,e)=>{await D.handle(o,e)});import{Router as J}from"express";var d=class{constructor(e,r){this.clerkWebhookService=e;this.userRepository=r}async handle(e,r){try{let t=await this.clerkWebhookService.verifyEvent(e);if(!t)throw new Error("Erro ao verificar webhook.");let{type:i,data:{created_at:s,birthday:n,last_sign_in_at:c,updated_at:S,email_addresses:_,...j}}=t;if(i==="user.created")return await this.userRepository.create({created_at:new Date(s),birthday:new Date(n),last_sign_in_at:new Date(c),updated_at:new Date(S),email_addresses:_,...j}),r.status(201).json({message:"Usu\xE1rio criado com sucesso."})}catch(t){if(t instanceof Error)return r.status(400).json({message:t.message})}}};var u=class{constructor(e,r){this.clerkWebhookService=e;this.userRepository=r}async handle(e,r){try{let t=await this.clerkWebhookService.verifyEvent(e);if(!t)throw new Error("Erro ao verificar webhook.");let{type:i,data:s}=t;i==="user.deleted"&&(await this.userRepository.delete(s),r.status(200).json({message:"Usu\xE1rio deletado com sucesso."}))}catch(t){t instanceof Error&&r.status(400).json({message:t.message})}}};var l=class{constructor(e,r){this.clerkWebhookService=e;this.userRepository=r}async handle(e,r){try{let t=await this.clerkWebhookService.verifyEvent(e);if(!t)throw new Error("Erro ao verificar webhook.");let{type:i,data:{email_addresses:s,...n}}=t;i==="user.updated"&&(await this.userRepository.update({...n,email_addresses:s}),r.status(200).json({message:"Usu\xE1rio atualizado com sucesso."}))}catch(t){t instanceof Error&&r.status(400).json({message:t.message})}}};var y=class{constructor(e){this.prisma=e}async create({email_addresses:e,first_name:r,last_name:t,...i}){await this.prisma.user.create({data:{...i,firstName:r,lastName:t,emailAddresses:{create:e.map(s=>({emailAddress:s.email_address,object:s.object,verification:JSON.stringify(s.verification),linkedTo:JSON.stringify(s.linked_to),id:s.id}))}}})}async update(e){await this.prisma.user.update({where:{id:e.id},data:{...e,emailAddresses:{update:e.email_addresses.map(r=>({where:{id:r.id},data:{emailAddress:r.email_address,object:r.object,verification:JSON.stringify(r.verification),linkedTo:JSON.stringify(r.linked_to)}}))}}})}async delete(e){await this.prisma.user.delete({where:{id:e.id}})}};import{PrismaClient as N}from"@prisma/client";var E=new N;function f(){return new y(E)}import{Webhook as O}from"svix";var h=class{constructor(e){this.webhook=e}async verifyEvent(e){let{"svix-id":r,"svix-timestamp":t,"svix-signature":i}=e.headers;if(!r||!t||!i)throw new Error("Headers are missing");let s=JSON.stringify(e.body),n={"svix-id":r,"svix-timestamp":t,"svix-signature":i};try{return this.webhook.verify(s,n)}catch(c){if(c instanceof Error)throw new Error(c.message)}}};function k(o){return new h(new O(o))}import{config as P}from"dotenv";P();function b(){return{createUserController:new d(k(process.env.CLERK_USER_CREATED),f())}}function g(){return{updateUserController:new l(k(process.env.CLERK_USER_UPDATED),f())}}function x(){return{deleteUserController:new u(k(process.env.CLERK_USER_DELETED),f())}}var{createUserController:L}=b(),{updateUserController:K}=g(),{deleteUserController:F}=x(),p=J();p.post("/api/webhook/created-user",async(o,e)=>{await L.handle(o,e)});p.post("/api/webhook/updated-user",async(o,e)=>{await K.handle(o,e)});p.post("/api/webhook/deleted-user",async(o,e)=>{await F.handle(o,e)});var a=w(),z={methods:["GET","POST","PUT","DELETE"],origin:["http://localhost:3000","https://rede-ct.vercel.app"],credentials:!0};a.use(M(z));a.use(w.json());a.use(w.urlencoded({extended:!1}));a.use("/",v);a.use("/auth",R);a.use("/user",p);var H=G.createServer(a),I=3e3;H.listen(I,()=>{console.log(`\u{1F680} Aplica\xE7\xE3o rodando na porta ${I}.`)});
//# sourceMappingURL=server.js.map