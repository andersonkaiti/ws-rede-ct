import se from"node:http";import b from"express";import te from"cors";import{Router as G}from"express";var x=G();x.get("/",(s,e)=>{e.status(200).json({message:"Rede CT"})});import{Router as Q}from"express";import{ClerkExpressWithAuth as H}from"@clerk/clerk-sdk-node";var $=H(),S=(s,e,t)=>$(s,e,t);var l=class{async handle(e,t){let r=e.auth;if(!r||!r.userId){t.status(401).json({message:"N\xE3o autenticado"});return}t.status(200).json({message:"Usu\xE1rio autenticado com Clerk",userId:r.userId})}};function A(){return{clerkAuthController:new l}}var q=Q();q.get("/",S,async(s,e)=>{let{clerkAuthController:t}=A();await t.handle(s,e)});import{Router as Z}from"express";var c=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:o,data:{created_at:i,birthday:n,last_sign_in_at:E,updated_at:J,email_addresses:K,...z}}=r;o==="user.created"&&(await this.userRepository.create({created_at:new Date(i),updated_at:new Date(J),email_addresses:K,...z}),t.status(201).json({message:"Usu\xE1rio criado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var u=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:o,data:i}=r;o==="user.deleted"&&(await this.userRepository.delete(i),t.status(200).json({message:"Usu\xE1rio deletado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var y=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:o,data:{email_addresses:i,...n}}=r;o==="user.updated"&&(await this.userRepository.update({...n,email_addresses:i}),t.status(200).json({message:"Usu\xE1rio atualizado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var w=class{constructor(e){this.prisma=e}async create({email_addresses:e,first_name:t,last_name:r,...o}){await this.prisma.user.create({data:{first_name:t,last_name:r,id:o.id,created_at:o.created_at,updated_at:o.updated_at,image_url:o.image_url,profile_image_url:o.profile_image_url,email_addresses:{create:e.map(i=>({email_address:i.email_address,linked_to:JSON.stringify(i.linked_to),id:i.id}))}}})}async update(e){await this.prisma.user.update({where:{id:e.id},data:{first_name:e.first_name,last_name:e.last_name,image_url:e.image_url,profile_image_url:e.profile_image_url,email_addresses:{update:e.email_addresses.map(t=>({where:{id:t.id},data:{email_address:t.email_address,linked_to:JSON.stringify(t.linked_to)}}))}}})}async delete(e){await this.prisma.user.delete({where:{id:e.id}})}};import{PrismaClient as V}from"@prisma/client";var f=new V;function R(){return new w(f)}import{Webhook as X}from"svix";var h=class{constructor(e){this.webhook=e}async verifyEvent(e){let{"svix-id":t,"svix-timestamp":r,"svix-signature":o}=e.headers;if(!t||!r||!o)throw new Error("Headers are missing");let i=JSON.stringify(e.body),n={"svix-id":t,"svix-timestamp":r,"svix-signature":o};try{return this.webhook.verify(i,n)}catch(E){if(E instanceof Error)throw new Error(E.message)}}};function k(s){return new h(new X(s))}import{config as Y}from"dotenv";Y();function j(){return{createUserController:new c(k(process.env.CLERK_USER_CREATED),R())}}function D(){return{updateUserController:new y(k(process.env.CLERK_USER_UPDATED),R())}}function T(){return{deleteUserController:new u(k(process.env.CLERK_USER_DELETED),R())}}var d=Z();d.post("/api/webhook/created-user",async(s,e)=>{let{createUserController:t}=j();await t.handle(s,e)});d.post("/api/webhook/updated-user",async(s,e)=>{let{updateUserController:t}=D();await t.handle(s,e)});d.post("/api/webhook/deleted-user",async(s,e)=>{let{deleteUserController:t}=T();await t.handle(s,e)});import{Router as ee}from"express";var v=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{title:r,content:o,author_id:i}=e.body,n=await this.newsRepository.create({title:r,content:o,author_id:i});t.status(201).json(n)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var C=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{id:r}=e.params,{title:o,content:i}=e.body,n=await this.newsRepository.update({id:r,title:o,content:i});t.status(200).json(n)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var I=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.newsRepository.delete(r),t.status(200).json({message:"Not\xEDcia deletada com sucesso."})}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var g=class{constructor(e){this.prisma=e}async create({title:e,content:t,author_id:r}){return await this.prisma.news.create({data:{title:e,content:t,author_id:r}})}async findAll(){return await this.prisma.news.findMany()}async findById(e){return await this.prisma.news.findUnique({where:{id:e}})}async findByAuthorId(e){return await this.prisma.news.findMany({where:{author_id:e}})}async update(e){return await this.prisma.news.update({where:{id:e.id},data:{title:e.title,content:e.content}})}async delete(e){await this.prisma.news.delete({where:{id:e}})}};function m(){return new g(f)}var N=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let r=await this.newsRepository.findAll();t.status(200).json(r)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var _=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{id:r}=e.params,o=await this.newsRepository.findById(r);t.status(200).json(o)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};var U=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{author_id:r}=e.params,o=await this.newsRepository.findByAuthorId(r);t.status(200).json(o)}catch(r){r instanceof Error&&t.status(500).json({message:r.message})}}};function W(){return{createNewsController:new v(m())}}function P(){return{findAllNewsController:new N(m())}}function B(){return{findNewsByIdController:new _(m())}}function O(){return{findNewsByAuthorIdController:new U(m())}}function F(){return{updateNewsController:new C(m())}}function L(){return{deleteNewsController:new I(m())}}var p=ee();p.post("/",async(s,e)=>{let{createNewsController:t}=W();await t.handle(s,e)});p.get("/",async(s,e)=>{let{findAllNewsController:t}=P();await t.handle(s,e)});p.get("/:id",async(s,e)=>{let{findNewsByIdController:t}=B();await t.handle(s,e)});p.get("/author/:author_id",async(s,e)=>{let{findNewsByAuthorIdController:t}=O();await t.handle(s,e)});p.put("/:id",async(s,e)=>{let{updateNewsController:t}=F();await t.handle(s,e)});p.delete("/:id",async(s,e)=>{let{deleteNewsController:t}=L();await t.handle(s,e)});var a=b(),re={methods:["GET","POST","PUT","DELETE"],origin:["http://localhost:3000","https://rede-ct.vercel.app"],credentials:!0};a.use(te(re));a.use(b.json());a.use(b.urlencoded({extended:!1}));a.use("/",x);a.use("/auth",q);a.use("/user",d);a.use("/news",p);var oe=se.createServer(a),M=4e3;oe.listen(M,()=>{console.log(`\u{1F680} Aplica\xE7\xE3o rodando na porta ${M}.`)});
//# sourceMappingURL=server.js.map