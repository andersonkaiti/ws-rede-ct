import He from"node:http";import We from"cors";import Y from"express";import{Router as Ce}from"express";var E=class{handle(e,t){let r=e.auth;if(!r?.userId){t.status(401).json({message:"N\xE3o autenticado"});return}t.status(200).json({message:"Usu\xE1rio autenticado com Clerk",userId:r.userId})}};function Z(){return{clerkAuthController:new E}}import{ClerkExpressWithAuth as ve}from"@clerk/clerk-sdk-node";var ke=ve(),ee=(o,e,t)=>ke(o,e,t);var z=Ce();z.get("/",ee,async(o,e)=>{let{clerkAuthController:t}=Z();await t.handle(o,e)});import{Router as _e}from"express";var J=_e();J.get("/",(o,e)=>{e.status(200).json({message:"Rede CT"})});import{Router as qe}from"express";var b={NEWS:"news"};var g=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{title:r,content:s,author_id:a}=e.body,n=this.firebaseStorageService.uploadFile(e,b.NEWS),p=await this.newsRepository.create({title:r,content:s,author_id:a,image_url:n});t.status(201).json(p)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var I=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{id:r}=e.params;await Promise.all([this.newsRepository.delete(r),this.firebaseStorageService.deleteFile(e)]),t.status(200).json({message:"Not\xEDcia deletada com sucesso."})}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var v=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let r=await this.newsRepository.findAll();t.status(200).json(r)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var k=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{author_id:r}=e.params,s=await this.newsRepository.findByAuthorId(r);t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var C=class{constructor(e){this.newsRepository=e}async handle(e,t){try{let{id:r}=e.params,s=await this.newsRepository.findById(r);t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var _=class{constructor(e,t){this.newsRepository=e;this.firebaseStorageService=t}async handle(e,t){try{let{id:r}=e.params,{title:s,content:a,image_url:n}=e.body,p;n&&(p=await this.firebaseStorageService.updateFile(e,b.NEWS));let R=await this.newsRepository.update({id:r,title:s,content:a,image_url:p});t.status(200).json(R)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};import{PrismaClient as Se}from"@prisma/client";var m=new Se({log:["query"]});var S=class{constructor(e){this.prisma=e}async create({title:e,content:t,author_id:r,image_url:s}){return await this.prisma.news.create({data:{title:e,content:t,author_id:r,image_url:s},include:{author:!0}})}async findAll(){return await this.prisma.news.findMany({include:{author:!0},orderBy:{created_at:"desc"}})}async findById(e){return await this.prisma.news.findUnique({where:{id:e},include:{author:!0}})}async findByAuthorId(e){return await this.prisma.news.findMany({where:{author_id:e},orderBy:{created_at:"desc"}})}async update(e){return await this.prisma.news.update({where:{id:e.id},data:{title:e.title,content:e.content,...e.image_url&&{image_url:e.image_url}}})}async delete(e){await this.prisma.news.delete({where:{id:e}})}};function f(){return new S(m)}import{getStorage as xe}from"firebase-admin/storage";import{config as Ue}from"dotenv";import re from"firebase-admin";Ue();var G=re.initializeApp({credential:re.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY,projectId:process.env.FIREBASE_PROJECT_ID,type:process.env.FIREBASE_TYPE,privateKeyId:process.env.FIREBASE_PRIVATE_KEY_ID,clientId:process.env.FIREBASE_CLIENT_ID,authUri:process.env.FIREBASE_AUTH_URI,tokenUri:process.env.FIREBASE_TOKEN_URI,authProviderX509CertUrl:process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,clientX509CertUrl:process.env.FIREBASE_CLIENT_X509_CERT_URL}),storageBucket:process.env.FIREBASE_BUCKET});G.name?console.log("\u{1F525} Firebase conectado com sucesso!"):console.error("\u274C Erro ao se conectar ao Firebase.");var Ae=xe(G),te=Ae.bucket(process.env.FIREBASE_BUCKET);import{randomUUID as De}from"node:crypto";var Me=/\/images\/.+$/,U=class{constructor(e){this.bucket=e}uploadFile(e,t){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");let r=e.file,s=e.body.author_id,a=`${De()}-${r?.originalname}`,n=this.bucket.file(`images/${t}/${s}/${a}`),p=n.createWriteStream({metadata:{contentType:r?.mimetype}});return p.on("error",X=>{console.log(X)}),p.on("finish",async()=>{await n.makePublic()}),p.end(r?.buffer),`https://storage.googleapis.com/${this.bucket.name}/${n.name}`}async updateFile(e,t){if(!e.file)throw new Error("Arquivo n\xE3o encontrado.");if(e.file.size!==0)try{let r=this.getPath(e.body.image_url);if(!r)throw new Error("Arquivo n\xE3o encontrado.");let[s,a]=await Promise.all([this.bucket.file(r).delete(),this.uploadFile(e,t)]);return a}catch(r){throw console.error(r),new Error("Erro ao atualizar o arquivo.")}}async deleteFile(e){if(!e.body.image_url)throw new Error("Arquivo n\xE3o encontrado.");let t=this.getPath(e.body.image_url);if(!t)throw new Error("Arquivo n\xE3o encontrado.");try{await this.bucket.file(t).delete()}catch(r){throw console.error(r),new Error("Erro ao deletar o arquivo.")}}getPath(e){let t=e.match(Me);return t?t[0].slice(1):null}};function x(){return new U(te)}function oe(){return{createNewsController:new g(f(),x())}}function se(){return{findAllNewsController:new v(f())}}function ae(){return{findNewsByIdController:new C(f())}}function ie(){return{findNewsByAuthorIdController:new k(f())}}function ne(){return{updateNewsController:new _(f(),x())}}function me(){return{deleteNewsController:new I(f(),x())}}import pe from"multer";var V=pe({storage:pe.memoryStorage()});var u=qe();u.post("/",V.single("image"),async(o,e)=>{let{createNewsController:t}=oe();await t.handle(o,e)});u.get("/",async(o,e)=>{let{findAllNewsController:t}=se();await t.handle(o,e)});u.get("/:id",async(o,e)=>{let{findNewsByIdController:t}=ae();await t.handle(o,e)});u.get("/author/:author_id",async(o,e)=>{let{findNewsByAuthorIdController:t}=ie();await t.handle(o,e)});u.put("/:id",V.single("image"),async(o,e)=>{let{updateNewsController:t}=ne();await t.handle(o,e)});u.delete("/:id",async(o,e)=>{let{deleteNewsController:t}=me();await t.handle(o,e)});import{Router as Be}from"express";var A=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{team_id:r}=e.params,{member:s}=e.body,a=await this.teamMemberRepository.create({team_id:r,...s});t.status(201).json(a)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var D=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.teamMemberRepository.delete(r),t.status(200).json({message:"Membro removido com sucesso"})}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var M=class{constructor(e){this.teamMemberRepository=e}async handle(e,t){try{let{member:r}=e.body,s=await this.teamMemberRepository.update({member:r});t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var y=class{constructor(e){this.prisma=e}async findByTeamId(e){return await this.prisma.teamMember.findMany({where:{team_id:e}})}async create(e){return await this.prisma.teamMember.create({data:e})}async update({member:{id:e,...t}}){return await this.prisma.teamMember.update({where:{id:e},data:t})}async updateMany({id:e,members:t}){await Promise.all(t.map(async r=>{let s=await this.prisma.teamMember.findFirst({where:{team_id:e,user_id:r.user.id},include:{user:!0}});s?await this.prisma.teamMember.update({where:{id:s.id},data:{role:r.role}}):await this.prisma.teamMember.create({data:{team_id:e,user_id:r.user.id,role:r.role}})}))}async delete(e){await this.prisma.teamMember.deleteMany({where:{id:e}})}async deleteMany(e){await Promise.all(e.map(async t=>{await this.prisma.teamMember.delete({where:{id:t}})}))}};function le(){return{createTeamMemberController:new A(new y(m))}}function ce(){return{updateTeamMemberController:new M(new y(m))}}function de(){return{deleteTeamMemberController:new D(new y(m))}}var q=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{name:r,type:s,members:a}=e.body,n=await this.teamRepository.create({name:r,type:s,members:a});t.status(201).json(n)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var B=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{id:r}=e.params;await this.teamRepository.delete(r),t.status(200).json({message:"Equipe deletada com sucesso"})}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var N=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let r=await this.teamRepository.findAll();return t.status(200).json(r)}catch(r){if(console.error(r),r instanceof Error)return t.status(400).json({message:r.message})}}};var j=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{id:r}=e.params,s=await this.teamRepository.findById(r);t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var F=class{constructor(e){this.teamRepository=e}async handle(e,t){try{let{type:r}=e.params,s=await this.teamRepository.findByType(r);t.status(200).json(s)}catch(r){console.error(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var O=class{constructor(e,t){this.teamRepository=e;this.teamMemberRepository=t}async handle(e,t){try{let{id:r}=e.params,{name:s,members:a}=e.body,n=await this.teamMemberRepository.findByTeamId(r),p=a.map(h=>h.id),R=n.filter(h=>!p.includes(h.id)).map(h=>h.id);await this.teamMemberRepository.deleteMany(R),await this.teamMemberRepository.updateMany({id:r,members:a});let X=await this.teamRepository.update({id:r,name:s});t.status(200).json(X)}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var d=class{constructor(e){this.prisma=e}async create({members:e,name:t,type:r}){return await this.prisma.team.create({data:{name:t,type:r,team_members:{create:e.map(s=>({role:s.role,user:{connect:{id:s.user.id}}}))}}})}async findAll(){return await this.prisma.team.findMany({include:{team_members:{include:{user:!0}}}})}async findById(e){return await this.prisma.team.findUnique({where:{id:e},include:{team_members:{include:{user:!0}}}})}async findByType(e){return await this.prisma.team.findMany({where:{type:e},include:{team_members:{include:{user:!0}}}})}async update({id:e,name:t}){return await this.prisma.team.update({where:{id:e},data:{name:t}})}async delete(e){await this.prisma.team.delete({where:{id:e}})}};function ue(){return{findAllTeamsController:new N(new d(m))}}function ye(){return{findTeamByIdController:new j(new d(m))}}function fe(){return{findTeamByTypeController:new F(new d(m))}}function Re(){return{createTeamController:new q(new d(m))}}function we(){return{updateTeamController:new O(new d(m),new y(m))}}function he(){return{deleteTeamController:new B(new d(m))}}var l=Be();l.get("/",async(o,e)=>{let{findAllTeamsController:t}=ue();await t.handle(o,e)});l.get("/id/:id",async(o,e)=>{let{findTeamByIdController:t}=ye();await t.handle(o,e)});l.get("/type/:type",async(o,e)=>{let{findTeamByTypeController:t}=fe();await t.handle(o,e)});l.post("/",async(o,e)=>{let{createTeamController:t}=Re();await t.handle(o,e)});l.put("/member/:id",async(o,e)=>{let{updateTeamMemberController:t}=ce();await t.handle(o,e)});l.post("/:team_id/member",async(o,e)=>{let{createTeamMemberController:t}=le();await t.handle(o,e)});l.put("/:id",async(o,e)=>{let{updateTeamController:t}=we();await t.handle(o,e)});l.delete("/member/:id",async(o,e)=>{let{deleteTeamMemberController:t}=de();await t.handle(o,e)});l.delete("/:id",async(o,e)=>{let{deleteTeamController:t}=he();await t.handle(o,e)});import{Router as Fe}from"express";import{config as je}from"dotenv";var P=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:{created_at:a,updated_at:n,email_addresses:p,...R}}=r;s==="user.created"&&(await this.userRepository.create({created_at:new Date(a),updated_at:new Date(n),email_addresses:p,...R}),t.status(201).json({message:"Usu\xE1rio criado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var K=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:a}=r;s==="user.deleted"&&(await this.userRepository.delete(a),t.status(200).json({message:"Usu\xE1rio deletado com sucesso."}))}catch(r){r instanceof Error&&t.status(400).json({message:r.message})}}};var W=class{constructor(e){this.userRepository=e}async handle(e,t){try{let r=await this.userRepository.findAll();t.status(200).json(r)}catch(r){console.log(r),r instanceof Error&&t.status(400).json({message:"Erro ao buscar usu\xE1rios"})}}};var Q=class{constructor(e,t){this.clerkWebhookService=e;this.userRepository=t}async handle(e,t){try{let r=await this.clerkWebhookService.verifyEvent(e);if(!r)throw new Error("Erro ao verificar webhook.");let{type:s,data:{email_addresses:a,...n}}=r;s==="user.updated"&&(await this.userRepository.update({...n,email_addresses:a}),t.status(200).json({message:"Usu\xE1rio atualizado com sucesso."}))}catch(r){console.log(r),r instanceof Error&&t.status(400).json({message:r.message})}}};var H=class{constructor(e){this.prisma=e}async create({email_addresses:e,first_name:t,last_name:r,...s}){await this.prisma.user.create({data:{first_name:t,last_name:r,id:s.id,created_at:s.created_at,updated_at:s.updated_at,image_url:s.image_url,profile_image_url:s.profile_image_url,email_addresses:{create:e.map(a=>({email_address:a.email_address,linked_to:JSON.stringify(a.linked_to),id:a.id}))}}})}async update(e){await this.prisma.user.update({where:{id:e.id},data:{first_name:e.first_name,last_name:e.last_name,image_url:e.image_url,profile_image_url:e.profile_image_url,email_addresses:{update:e.email_addresses.map(t=>({where:{id:t.id},data:{email_address:t.email_address,linked_to:JSON.stringify(t.linked_to)}}))}}})}async delete(e){await this.prisma.user.delete({where:{id:e.id}})}async findAll(){return await this.prisma.user.findMany({include:{email_addresses:!0}})}};function T(){return new H(m)}import{Webhook as Ne}from"svix";var L=class{constructor(e){this.webhook=e}async verifyEvent(e){let{"svix-id":t,"svix-timestamp":r,"svix-signature":s}=e.headers;if(!(t&&r&&s))throw new Error("Headers are missing");let a=JSON.stringify(e.body),n={"svix-id":t,"svix-timestamp":r,"svix-signature":s};try{return await this.webhook.verify(a,n)}catch(p){if(p instanceof Error)throw new Error(p.message)}}};function $(o){return new L(new Ne(o))}je();function Te(){return{createUserController:new P($(process.env.CLERK_USER_CREATED),T())}}function Ee(){return{updateUserController:new Q($(process.env.CLERK_USER_UPDATED),T())}}function be(){return{deleteUserController:new K($(process.env.CLERK_USER_DELETED),T())}}function ge(){return{findAllUsersController:new W(T())}}var{createUserController:Oe}=Te(),{updateUserController:Pe}=Ee(),{deleteUserController:Ke}=be(),w=Fe();w.post("/api/webhook/created-user",async(o,e)=>{await Oe.handle(o,e)});w.post("/api/webhook/updated-user",async(o,e)=>{await Pe.handle(o,e)});w.post("/api/webhook/deleted-user",async(o,e)=>{await Ke.handle(o,e)});w.get("/",async(o,e)=>{let{findAllUsersController:t}=ge();await t.handle(o,e)});var c=Y(),Qe={methods:["GET","POST","PUT","DELETE"],origin:["http://localhost:3000","https://rede-ct.vercel.app"],credentials:!0};c.use(We(Qe));c.use(Y.json());c.use(Y.urlencoded({extended:!1}));c.use("/",J);c.use("/auth",z);c.use("/user",w);c.use("/news",u);c.use("/team",l);var Le=He.createServer(c),Ie=4e3;Le.listen(Ie,()=>{console.log(`\u{1F680} Aplica\xE7\xE3o rodando na porta ${Ie}.`)});
//# sourceMappingURL=server.js.map